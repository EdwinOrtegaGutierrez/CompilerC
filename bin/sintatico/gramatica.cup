package sintatico;

import java_cup.runtime.*;
import java_cup.sym;

parser code {: 
    public void syntax_error(Symbol s) { 
        String errorMessage = "\u001B[33mError de sintaxis en línea " + s.left + ", columna " + s.right + ", símbolo \"" + s.value + "\"\u001B[0m";
        report_error(errorMessage, null);        
     } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        report_fatal_error("\u001B[33mValue: "+s.value+"\u001B[0m", null); 
    }
:};

/* SIMBOLOS TERMINALES */
terminal AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, INCLUDE, CLASS;
terminal DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER; 
terminal RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION;
terminal UNSIGNED, VOID, VOLATILE, WHILE, LIB, BOOLS, FLOATS, INTS, CHARS, STRINGS;
terminal MAIN, BRACKET_LEFT, BRACKET_RIGHT, PRINTF, PARENTHESES_LEFT, PARENTHESES_RIGHT;

terminal RESTA, DIVISION, SUMA, MODULO, MENOR_QUE, MAYOR_QUE, NEGACION_LOGICA, AND_BINARIO;
terminal OR_BINARIO, XOR_BINARIO, MULTIPLICACION, COMPLEMENTO_A_UNO, INCREMENTO, SUMA_ASIGNACION, IGUAL_QUE, RESTA_ASIGNACION;
terminal DECREMENTO, DIVISION_ASIGNACION,MODULO_Y_ASIGNACION, MENOR_O_IGUAL_QUE,DESPLAZAMIENTO_IZQUIERDA, MAYOR_O_IGUAL_QUE,DESPLAZAMIENTO_DERECHA; 
terminal DIFERENTE_QUE, ASIGNACION_AND, AND,OR,ASIGNACION_XOR, LLAMADA_A_FUNCION, MULTIPLIACION_Y_ASIGNACION, COMPARACION_TRES_SENTIDOS, ASIGNACION_DESPLAZAMIENTO_IZQUIERDA;
terminal ASIGNACION_DESPLAZAMIENTO_DERECHA;
terminal VAR_NAME;

terminal IGUAL, ENTEROS, PUNTO_COMA, COMA, DOS_PUNTOS, LIST;
/* SIMBOLOS NO TERMINALES */
non terminal declarations, dec_lib, dec_main, PRINTF_LIST, PRINTFS, RETURNS, IFS_LIST, IFS, FORS_LIST, FORS, WHILES_LIST, WHILES;
non terminal DO_WHILE, DO_WHILE_LIST, VAR_LIST, VARS, TIPO_DATO, DATO;
non terminal DATA_FUNCTION, DATAS_FUNCTION, FUNCION, FUNCIONES, SWITCHS, DATA_SWITCH, CASES_LIST, CASES, DEFAULT_SWITCH;
non terminal CONDICIONALES, CONDICIONAL_LIST, ELSEIFS, ELSES;

non terminal PARAMETROS, PARAMETRO, OPERATORS;

/* REGLAS GRAMATICALES */
start with declarations;

declarations::= dec_lib FUNCIONES dec_main | dec_lib dec_main; /* LIBRERIAS - MAIN */

dec_lib::= INCLUDE LIB; /* LOGICA PARA LIBRERIAS */

dec_main::= INT MAIN LLAMADA_A_FUNCION BRACKET_LEFT DATAS_FUNCTION RETURNS BRACKET_RIGHT; /* LOGICA DECLARACION MAIN */

DATAS_FUNCTION::= DATAS_FUNCTION DATA_FUNCTION | DATA_FUNCTION;

DATA_FUNCTION::= PRINTFS | IFS | ELSEIFS | ELSES | FORS | WHILES | DO_WHILE | VARS | SWITCHS; /* INFORMACION DEL MAIN */

/* DECLARACION DE VARIABLES */
VARS::= TIPO_DATO VAR_NAME IGUAL DATO PUNTO_COMA | TIPO_DATO VAR_NAME IGUAL VAR_NAME PUNTO_COMA | TIPO_DATO VAR_NAME PUNTO_COMA | TIPO_DATO VAR_NAME IGUAL VAR_NAME OPERATORS DATO PUNTO_COMA;

TIPO_DATO::= CHAR | INT | FLOAT | SHORT | DOUBLE | LONG | LONG DOUBLE | VOID;

DATO::= STRINGS | CHARS | INTS | FLOATS; /* PARA AGREGAR SHORT, DOUBLE, LONG Y LONG DOUBLE SE DEBEN CREAR LAS ER */

/* DO WHILE */
DO_WHILE::= DO BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT WHILE PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT;

/* WHILE */
WHILES::= WHILE PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT;

/* IF */
IFS::= IF PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT;
ELSEIFS::= ELSE IF PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT;
ELSES::= ELSE BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT;

/* FOR */
FORS::= FOR PARENTHESES_LEFT 
                    VARS 
                    CONDICIONALES PUNTO_COMA 
                    VAR_NAME INCREMENTO 
            PARENTHESES_RIGHT 
            BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT; 

PRINTFS::= PRINTF PARENTHESES_LEFT STRINGS:info PARENTHESES_RIGHT PUNTO_COMA {: System.out.println(((String) info).substring(1, ((String) info).length() - 1)); :};

/* FUNCIONES */
FUNCIONES::= FUNCIONES FUNCION | FUNCION;

FUNCION::= TIPO_DATO VAR_NAME LLAMADA_A_FUNCION BRACKET_LEFT RETURNS BRACKET_RIGHT | TIPO_DATO VAR_NAME PARENTHESES_LEFT PARAMETROS PARENTHESES_RIGHT BRACKET_LEFT RETURNS BRACKET_RIGHT;

PARAMETRO::= TIPO_DATO VAR_NAME | TIPO_DATO VAR_NAME LIST;

PARAMETROS::= PARAMETROS COMA PARAMETRO | PARAMETRO;

/* SWITCH CASE */
SWITCHS::= SWITCH PARENTHESES_LEFT VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT DATA_SWITCH BRACKET_RIGHT;

DATA_SWITCH::= CASES_LIST DEFAULT_SWITCH;

CASES_LIST::= CASES_LIST CASES | CASES;

CASES::= CASE DATO DOS_PUNTOS DATAS_FUNCTION BREAK PUNTO_COMA;

DEFAULT_SWITCH::= DEFAULT DOS_PUNTOS DATAS_FUNCTION;

/* CONDICIONALES */
CONDICIONAL_LIST::= MAYOR_QUE | MENOR_QUE | MENOR_O_IGUAL_QUE | MAYOR_O_IGUAL_QUE | DIFERENTE_QUE | IGUAL_QUE | NEGACION_LOGICA | AND | OR;

CONDICIONALES::= VAR_NAME CONDICIONAL_LIST VAR_NAME | VAR_NAME CONDICIONAL_LIST DATO | DATO CONDICIONAL_LIST DATO;

/* OPERADORES */
OPERATORS::= RESTA | SUMA | MULTIPLICACION | DIVISION;

RETURNS::= RETURN INTS PUNTO_COMA | RETURN VAR_NAME PUNTO_COMA; /* LECTURA DE RETURNS */