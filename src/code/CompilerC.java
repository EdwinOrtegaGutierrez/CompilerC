
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 06 19:43:28 CST 2024
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java_cup.sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 06 19:43:28 CST 2024
  */
public class CompilerC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerC() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\004\011\000\002\025\004" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\045\007\000\002\045\011" +
    "\000\002\045\006\000\002\045\011\000\002\021\007\000" +
    "\002\021\011\000\002\021\007\000\002\021\007\000\002" +
    "\021\005\000\002\021\011\000\002\021\011\000\002\021" +
    "\012\000\002\021\014\000\002\021\012\000\002\021\011" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\004\000\002\022\003\000\002\044\004\000\002\044" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\004\000\002\023\003\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\005\000\002" +
    "\023\004\000\002\016\012\000\002\015\011\000\002\011" +
    "\011\000\002\037\012\000\002\040\006\000\002\013\015" +
    "\000\002\006\007\000\002\006\014\000\002\027\004\000" +
    "\002\027\003\000\002\026\010\000\002\026\012\000\002" +
    "\026\012\000\002\042\004\000\002\042\005\000\002\041" +
    "\005\000\002\041\003\000\002\030\011\000\002\031\004" +
    "\000\002\032\004\000\002\032\003\000\002\033\010\000" +
    "\002\034\005\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\014\006\001\002\000\020\007\021\016" +
    "\017\022\023\026\011\027\012\032\022\043\016\001\002" +
    "\000\004\002\010\001\002\000\004\046\007\001\002\000" +
    "\020\007\ufffe\016\ufffe\022\ufffe\026\ufffe\027\ufffe\032\ufffe" +
    "\043\ufffe\001\002\000\004\002\001\001\002\000\006\054" +
    "\343\123\uffe0\001\002\000\006\016\342\123\uffdc\001\002" +
    "\000\004\123\026\001\002\000\020\007\021\016\017\022" +
    "\023\026\011\027\012\032\022\043\016\001\002\000\004" +
    "\002\uffff\001\002\000\004\123\uffda\001\002\000\004\123" +
    "\uffdd\001\002\000\020\007\uffc4\016\uffc4\022\uffc4\026\uffc4" +
    "\027\uffc4\032\uffc4\043\uffc4\001\002\000\004\123\uffe1\001" +
    "\002\000\004\123\uffde\001\002\000\004\123\uffdf\001\002" +
    "\000\004\002\000\001\002\000\020\007\uffc5\016\uffc5\022" +
    "\uffc5\026\uffc5\027\uffc5\032\uffc5\043\uffc5\001\002\000\006" +
    "\060\030\116\027\001\002\000\004\055\337\001\002\000" +
    "\020\007\021\016\017\022\023\026\031\027\012\032\022" +
    "\043\016\001\002\000\004\123\uffe0\001\002\000\004\123" +
    "\335\001\002\000\006\061\036\127\035\001\002\000\006" +
    "\061\uffbd\127\uffbd\001\002\000\020\007\021\016\017\022" +
    "\023\026\031\027\012\032\022\043\016\001\002\000\004" +
    "\055\037\001\002\000\044\007\021\013\055\016\017\017" +
    "\041\022\023\023\065\025\050\026\031\027\012\031\045" +
    "\032\022\034\040\037\047\043\016\045\043\057\051\123" +
    "\063\001\002\000\004\060\325\001\002\000\006\025\313" +
    "\055\314\001\002\000\004\056\312\001\002\000\004\060" +
    "\304\001\002\000\050\005\ufff1\007\ufff1\013\ufff1\016\ufff1" +
    "\017\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1\027\ufff1\031" +
    "\ufff1\032\ufff1\034\ufff1\037\ufff1\043\ufff1\045\ufff1\056\ufff1" +
    "\057\ufff1\123\ufff1\001\002\000\006\051\300\123\301\001" +
    "\002\000\050\005\ufff6\007\ufff6\013\ufff6\016\ufff6\017\ufff6" +
    "\022\ufff6\023\ufff6\025\ufff6\026\ufff6\027\ufff6\031\ufff6\032" +
    "\ufff6\034\ufff6\037\ufff6\043\ufff6\045\ufff6\056\ufff6\057\ufff6" +
    "\123\ufff6\001\002\000\004\060\255\001\002\000\004\060" +
    "\247\001\002\000\004\060\234\001\002\000\050\005\ufffb" +
    "\007\ufffb\013\ufffb\016\ufffb\017\ufffb\022\ufffb\023\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\034\ufffb\037\ufffb" +
    "\043\ufffb\045\ufffb\056\ufffb\057\ufffb\123\ufffb\001\002\000" +
    "\050\005\ufff9\007\ufff9\013\ufff9\016\ufff9\017\ufff9\022\ufff9" +
    "\023\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9\034" +
    "\ufff9\037\ufff9\043\ufff9\045\ufff9\056\ufff9\057\ufff9\123\ufff9" +
    "\001\002\000\050\005\ufffa\007\ufffa\013\ufffa\016\ufffa\017" +
    "\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\031\ufffa" +
    "\032\ufffa\034\ufffa\037\ufffa\043\ufffa\045\ufffa\056\ufffa\057" +
    "\ufffa\123\ufffa\001\002\000\004\055\225\001\002\000\050" +
    "\005\ufff7\007\ufff7\013\ufff7\016\ufff7\017\ufff7\022\ufff7\023" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\034\ufff7" +
    "\037\ufff7\043\ufff7\045\ufff7\056\ufff7\057\ufff7\123\ufff7\001" +
    "\002\000\050\005\ufff2\007\ufff2\013\ufff2\016\ufff2\017\ufff2" +
    "\022\ufff2\023\ufff2\025\ufff2\026\ufff2\027\ufff2\031\ufff2\032" +
    "\ufff2\034\ufff2\037\ufff2\043\ufff2\045\ufff2\056\ufff2\057\ufff2" +
    "\123\ufff2\001\002\000\044\007\021\013\055\016\017\017" +
    "\041\022\023\023\065\025\050\026\031\027\012\032\022" +
    "\034\040\037\047\043\016\045\043\056\224\057\051\123" +
    "\063\001\002\000\050\005\ufff4\007\ufff4\013\ufff4\016\ufff4" +
    "\017\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\031" +
    "\ufff4\032\ufff4\034\ufff4\037\ufff4\043\ufff4\045\ufff4\056\ufff4" +
    "\057\ufff4\123\ufff4\001\002\000\050\005\ufff5\007\ufff5\013" +
    "\ufff5\016\ufff5\017\ufff5\022\ufff5\023\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\031\ufff5\032\ufff5\034\ufff5\037\ufff5\043\ufff5\045" +
    "\ufff5\056\ufff5\057\ufff5\123\ufff5\001\002\000\006\060\115" +
    "\133\161\001\002\000\050\005\ufff8\007\ufff8\013\ufff8\016" +
    "\ufff8\017\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\031\ufff8\032\ufff8\034\ufff8\037\ufff8\043\ufff8\045\ufff8\056" +
    "\ufff8\057\ufff8\123\ufff8\001\002\000\004\060\156\001\002" +
    "\000\004\123\070\001\002\000\050\005\ufff3\007\ufff3\013" +
    "\ufff3\016\ufff3\017\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\031\ufff3\032\ufff3\034\ufff3\037\ufff3\043\ufff3\045" +
    "\ufff3\056\ufff3\057\ufff3\123\ufff3\001\002\000\010\124\073" +
    "\126\072\131\071\001\002\000\004\124\151\001\002\000" +
    "\062\005\uffe8\007\uffe8\013\uffe8\016\uffe8\017\uffe8\022\uffe8" +
    "\023\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\034" +
    "\uffe8\037\uffe8\043\uffe8\045\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\056\uffe8\057\uffe8\062\uffe8\123\uffe8\001\002\000" +
    "\020\034\040\050\100\051\074\052\077\053\076\062\103" +
    "\123\101\001\002\000\052\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\056\uffd5\061\uffd5\062\uffd5\066\uffd5\067\uffd5\070\uffd5" +
    "\100\uffd5\105\uffd5\107\uffd5\111\uffd5\113\uffd5\114\uffd5\126" +
    "\uffd5\127\150\130\uffd5\132\uffd5\001\002\000\014\062\107" +
    "\063\113\064\112\074\110\126\143\001\002\000\052\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\056\uffd7\061\uffd7\062\uffd7" +
    "\066\uffd7\067\uffd7\070\uffd7\100\uffd7\105\uffd7\107\uffd7\111" +
    "\uffd7\113\uffd7\114\uffd7\126\uffd7\127\142\130\uffd7\132\uffd7" +
    "\001\002\000\052\050\uffd6\051\uffd6\052\uffd6\053\uffd6\056" +
    "\uffd6\061\uffd6\062\uffd6\066\uffd6\067\uffd6\070\uffd6\100\uffd6" +
    "\105\uffd6\107\uffd6\111\uffd6\113\uffd6\114\uffd6\126\uffd6\127" +
    "\141\130\uffd6\132\uffd6\001\002\000\052\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\056\uffd3\061\uffd3\062\uffd3\066\uffd3\067" +
    "\uffd3\070\uffd3\100\uffd3\105\uffd3\107\uffd3\111\uffd3\113\uffd3" +
    "\114\uffd3\126\uffd3\127\140\130\uffd3\132\uffd3\001\002\000" +
    "\020\060\115\062\107\063\113\064\112\074\110\126\111" +
    "\133\114\001\002\000\004\126\106\001\002\000\004\051" +
    "\104\001\002\000\052\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\056\uffd4\061\uffd4\062\uffd4\066\uffd4\067\uffd4\070\uffd4\100" +
    "\uffd4\105\uffd4\107\uffd4\111\uffd4\113\uffd4\114\uffd4\126\uffd4" +
    "\127\105\130\uffd4\132\uffd4\001\002\000\050\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\056\uffcf\061\uffcf\062\uffcf\066\uffcf" +
    "\067\uffcf\070\uffcf\100\uffcf\105\uffcf\107\uffcf\111\uffcf\113" +
    "\uffcf\114\uffcf\126\uffcf\130\uffcf\132\uffcf\001\002\000\062" +
    "\005\uffea\007\uffea\013\uffea\016\uffea\017\uffea\022\uffea\023" +
    "\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea\034\uffea" +
    "\037\uffea\043\uffea\045\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\056\uffea\057\uffea\062\uffea\123\uffea\001\002\000\020" +
    "\034\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\062\uffaa\123" +
    "\uffaa\001\002\000\020\034\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\062\uffa8\123\uffa8\001\002\000\062\005\uffe9\007" +
    "\uffe9\013\uffe9\016\uffe9\017\uffe9\022\uffe9\023\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\031\uffe9\032\uffe9\034\uffe9\037\uffe9\043" +
    "\uffe9\045\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\056\uffe9" +
    "\057\uffe9\062\uffe9\123\uffe9\001\002\000\020\034\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\062\uffa9\123\uffa9\001\002" +
    "\000\020\034\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\062" +
    "\uffa7\123\uffa7\001\002\000\004\123\135\001\002\000\016" +
    "\050\100\051\074\052\077\053\076\062\103\123\125\001" +
    "\002\000\016\050\100\051\074\052\077\053\076\062\103" +
    "\123\120\001\002\000\004\126\122\001\002\000\004\126" +
    "\121\001\002\000\062\005\uffe6\007\uffe6\013\uffe6\016\uffe6" +
    "\017\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6\031" +
    "\uffe6\032\uffe6\034\uffe6\037\uffe6\043\uffe6\045\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\056\uffe6\057\uffe6\062\uffe6\123" +
    "\uffe6\001\002\000\062\005\uffe7\007\uffe7\013\uffe7\016\uffe7" +
    "\017\uffe7\022\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\031" +
    "\uffe7\032\uffe7\034\uffe7\037\uffe7\043\uffe7\045\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\056\uffe7\057\uffe7\062\uffe7\123" +
    "\uffe7\001\002\000\016\050\100\051\074\052\077\053\076" +
    "\061\132\062\103\001\002\000\020\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\056\uffd8\061\uffd8\062\uffd8\001\002\000\004" +
    "\127\126\001\002\000\004\123\127\001\002\000\004\061" +
    "\130\001\002\000\004\126\131\001\002\000\062\005\uffef" +
    "\007\uffef\013\uffef\016\uffef\017\uffef\022\uffef\023\uffef\025" +
    "\uffef\026\uffef\027\uffef\031\uffef\032\uffef\034\uffef\037\uffef" +
    "\043\uffef\045\uffef\056\uffef\057\uffef\062\uffef\063\uffef\064" +
    "\uffef\074\uffef\123\uffef\126\uffef\001\002\000\004\126\134" +
    "\001\002\000\020\050\uffd9\051\uffd9\052\uffd9\053\uffd9\056" +
    "\uffd9\061\uffd9\062\uffd9\001\002\000\062\005\ufff0\007\ufff0" +
    "\013\ufff0\016\ufff0\017\ufff0\022\ufff0\023\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\031\ufff0\032\ufff0\034\ufff0\037\ufff0\043\ufff0" +
    "\045\ufff0\056\ufff0\057\ufff0\062\ufff0\063\ufff0\064\ufff0\074" +
    "\ufff0\123\ufff0\126\ufff0\001\002\000\004\132\136\001\002" +
    "\000\004\126\137\001\002\000\062\005\uffe5\007\uffe5\013" +
    "\uffe5\016\uffe5\017\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\031\uffe5\032\uffe5\034\uffe5\037\uffe5\043\uffe5\045" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5\057\uffe5" +
    "\062\uffe5\123\uffe5\001\002\000\050\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\056\uffce\061\uffce\062\uffce\066\uffce\067\uffce" +
    "\070\uffce\100\uffce\105\uffce\107\uffce\111\uffce\113\uffce\114" +
    "\uffce\126\uffce\130\uffce\132\uffce\001\002\000\050\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\056\uffd1\061\uffd1\062\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\100\uffd1\105\uffd1\107\uffd1\111\uffd1" +
    "\113\uffd1\114\uffd1\126\uffd1\130\uffd1\132\uffd1\001\002\000" +
    "\050\050\uffd2\051\uffd2\052\uffd2\053\uffd2\056\uffd2\061\uffd2" +
    "\062\uffd2\066\uffd2\067\uffd2\070\uffd2\100\uffd2\105\uffd2\107" +
    "\uffd2\111\uffd2\113\uffd2\114\uffd2\126\uffd2\130\uffd2\132\uffd2" +
    "\001\002\000\062\005\uffec\007\uffec\013\uffec\016\uffec\017" +
    "\uffec\022\uffec\023\uffec\025\uffec\026\uffec\027\uffec\031\uffec" +
    "\032\uffec\034\uffec\037\uffec\043\uffec\045\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\056\uffec\057\uffec\062\uffec\123\uffec" +
    "\001\002\000\006\034\040\123\146\001\002\000\004\126" +
    "\147\001\002\000\004\060\115\001\002\000\062\005\uffeb" +
    "\007\uffeb\013\uffeb\016\uffeb\017\uffeb\022\uffeb\023\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb\034\uffeb\037\uffeb" +
    "\043\uffeb\045\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\056" +
    "\uffeb\057\uffeb\062\uffeb\123\uffeb\001\002\000\050\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\056\uffd0\061\uffd0\062\uffd0\066" +
    "\uffd0\067\uffd0\070\uffd0\100\uffd0\105\uffd0\107\uffd0\111\uffd0" +
    "\113\uffd0\114\uffd0\126\uffd0\130\uffd0\132\uffd0\001\002\000" +
    "\004\055\152\001\002\000\014\050\100\051\074\052\077" +
    "\053\076\062\103\001\002\000\016\050\100\051\074\052" +
    "\077\053\076\056\154\062\103\001\002\000\004\126\155" +
    "\001\002\000\062\005\uffe3\007\uffe3\013\uffe3\016\uffe3\017" +
    "\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3" +
    "\032\uffe3\034\uffe3\037\uffe3\043\uffe3\045\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\056\uffe3\057\uffe3\062\uffe3\123\uffe3" +
    "\001\002\000\022\007\021\016\017\022\023\026\031\027" +
    "\012\032\022\043\016\123\160\001\002\000\016\050\100" +
    "\051\074\052\077\053\076\062\103\123\175\001\002\000" +
    "\004\133\161\001\002\000\004\123\162\001\002\000\004" +
    "\132\163\001\002\000\004\124\164\001\002\000\004\123" +
    "\165\001\002\000\006\126\166\133\167\001\002\000\062" +
    "\005\uffe2\007\uffe2\013\uffe2\016\uffe2\017\uffe2\022\uffe2\023" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2\034\uffe2" +
    "\037\uffe2\043\uffe2\045\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\056\uffe2\057\uffe2\062\uffe2\123\uffe2\001\002\000\004" +
    "\123\170\001\002\000\004\132\171\001\002\000\004\126" +
    "\172\001\002\000\062\005\uffe4\007\uffe4\013\uffe4\016\uffe4" +
    "\017\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\027\uffe4\031" +
    "\uffe4\032\uffe4\034\uffe4\037\uffe4\043\uffe4\045\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\056\uffe4\057\uffe4\062\uffe4\123" +
    "\uffe4\001\002\000\004\126\214\001\002\000\024\066\205" +
    "\067\200\070\203\100\204\105\201\107\206\111\177\113" +
    "\176\114\207\001\002\000\024\066\205\067\200\070\203" +
    "\100\204\105\201\107\206\111\177\113\176\114\207\001" +
    "\002\000\016\050\uffaf\051\uffaf\052\uffaf\053\uffaf\062\uffaf" +
    "\123\uffaf\001\002\000\016\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\062\uffb2\123\uffb2\001\002\000\016\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\062\uffb6\123\uffb6\001\002\000\016\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\062\uffb4\123\uffb4\001\002" +
    "\000\016\050\100\051\074\052\077\053\076\062\103\123" +
    "\211\001\002\000\016\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\062\uffb0\123\uffb0\001\002\000\016\050\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\062\uffb1\123\uffb1\001\002\000\016\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\062\uffb5\123\uffb5\001\002\000" +
    "\016\050\uffb3\051\uffb3\052\uffb3\053\uffb3\062\uffb3\123\uffb3" +
    "\001\002\000\016\050\uffae\051\uffae\052\uffae\053\uffae\062" +
    "\uffae\123\uffae\001\002\000\006\061\uffac\126\uffac\001\002" +
    "\000\006\061\uffad\126\uffad\001\002\000\014\050\100\051" +
    "\074\052\077\053\076\062\103\001\002\000\006\061\uffab" +
    "\126\uffab\001\002\000\004\123\215\001\002\000\004\076" +
    "\216\001\002\000\004\061\217\001\002\000\004\055\220" +
    "\001\002\000\042\007\021\013\055\016\017\017\041\022" +
    "\023\023\065\025\050\026\031\027\012\032\022\034\040" +
    "\037\047\043\016\045\043\057\051\123\063\001\002\000" +
    "\044\007\021\013\055\016\017\017\041\022\023\023\065" +
    "\025\050\026\031\027\012\032\022\034\040\037\047\043" +
    "\016\045\043\056\223\057\051\123\063\001\002\000\050" +
    "\005\ufffc\007\ufffc\013\ufffc\016\ufffc\017\ufffc\022\ufffc\023" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc\034\ufffc" +
    "\037\ufffc\043\ufffc\045\ufffc\056\ufffc\057\ufffc\123\ufffc\001" +
    "\002\000\050\005\uffc8\007\uffc8\013\uffc8\016\uffc8\017\uffc8" +
    "\022\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\032" +
    "\uffc8\034\uffc8\037\uffc8\043\uffc8\045\uffc8\056\uffc8\057\uffc8" +
    "\123\uffc8\001\002\000\020\007\uffc1\016\uffc1\022\uffc1\026" +
    "\uffc1\027\uffc1\032\uffc1\043\uffc1\001\002\000\042\007\021" +
    "\013\055\016\017\017\041\022\023\023\065\025\050\026" +
    "\031\027\012\032\022\034\040\037\047\043\016\045\043" +
    "\057\051\123\063\001\002\000\044\007\021\013\055\016" +
    "\017\017\041\022\023\023\065\025\050\026\031\027\012" +
    "\032\022\034\040\037\047\043\016\045\043\056\227\057" +
    "\051\123\063\001\002\000\004\045\230\001\002\000\004" +
    "\060\231\001\002\000\016\050\100\051\074\052\077\053" +
    "\076\062\103\123\175\001\002\000\004\061\233\001\002" +
    "\000\050\005\uffcd\007\uffcd\013\uffcd\016\uffcd\017\uffcd\022" +
    "\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd" +
    "\034\uffcd\037\uffcd\043\uffcd\045\uffcd\056\uffcd\057\uffcd\123" +
    "\uffcd\001\002\000\004\053\235\001\002\000\006\061\237" +
    "\127\236\001\002\000\004\123\241\001\002\000\004\126" +
    "\240\001\002\000\050\005\uffc7\007\uffc7\013\uffc7\016\uffc7" +
    "\017\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\031" +
    "\uffc7\032\uffc7\034\uffc7\037\uffc7\043\uffc7\045\uffc7\056\uffc7" +
    "\057\uffc7\123\uffc7\001\002\000\004\133\242\001\002\000" +
    "\004\123\243\001\002\000\004\132\244\001\002\000\004" +
    "\061\245\001\002\000\004\126\246\001\002\000\050\005" +
    "\uffc6\007\uffc6\013\uffc6\016\uffc6\017\uffc6\022\uffc6\023\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\034\uffc6\037" +
    "\uffc6\043\uffc6\045\uffc6\056\uffc6\057\uffc6\123\uffc6\001\002" +
    "\000\016\050\100\051\074\052\077\053\076\062\103\123" +
    "\175\001\002\000\004\061\251\001\002\000\004\055\252" +
    "\001\002\000\042\007\021\013\055\016\017\017\041\022" +
    "\023\023\065\025\050\026\031\027\012\032\022\034\040" +
    "\037\047\043\016\045\043\057\051\123\063\001\002\000" +
    "\044\007\021\013\055\016\017\017\041\022\023\023\065" +
    "\025\050\026\031\027\012\032\022\034\040\037\047\043" +
    "\016\045\043\056\254\057\051\123\063\001\002\000\050" +
    "\005\uffcb\007\uffcb\013\uffcb\016\uffcb\017\uffcb\022\uffcb\023" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\034\uffcb" +
    "\037\uffcb\043\uffcb\045\uffcb\056\uffcb\057\uffcb\123\uffcb\001" +
    "\002\000\004\123\256\001\002\000\004\061\257\001\002" +
    "\000\004\055\260\001\002\000\004\006\264\001\002\000" +
    "\006\006\264\012\273\001\002\000\004\056\272\001\002" +
    "\000\006\006\uffb9\012\uffb9\001\002\000\014\050\100\051" +
    "\074\052\077\053\076\062\103\001\002\000\004\130\266" +
    "\001\002\000\042\007\021\013\055\016\017\017\041\022" +
    "\023\023\065\025\050\026\031\027\012\032\022\034\040" +
    "\037\047\043\016\045\043\057\051\123\063\001\002\000" +
    "\044\005\270\007\021\013\055\016\017\017\041\022\023" +
    "\023\065\025\050\026\031\027\012\032\022\034\040\037" +
    "\047\043\016\045\043\057\051\123\063\001\002\000\004" +
    "\126\271\001\002\000\006\006\uffb8\012\uffb8\001\002\000" +
    "\050\005\uffbc\007\uffbc\013\uffbc\016\uffbc\017\uffbc\022\uffbc" +
    "\023\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\032\uffbc\034" +
    "\uffbc\037\uffbc\043\uffbc\045\uffbc\056\uffbc\057\uffbc\123\uffbc" +
    "\001\002\000\004\130\276\001\002\000\004\056\uffbb\001" +
    "\002\000\006\006\uffba\012\uffba\001\002\000\042\007\021" +
    "\013\055\016\017\017\041\022\023\023\065\025\050\026" +
    "\031\027\012\032\022\034\040\037\047\043\016\045\043" +
    "\057\051\123\063\001\002\000\044\007\021\013\055\016" +
    "\017\017\041\022\023\023\065\025\050\026\031\027\012" +
    "\032\022\034\040\037\047\043\016\045\043\056\uffb7\057" +
    "\051\123\063\001\002\000\004\126\303\001\002\000\004" +
    "\126\302\001\002\000\004\056\uffa5\001\002\000\004\056" +
    "\uffa6\001\002\000\016\050\100\051\074\052\077\053\076" +
    "\062\103\123\175\001\002\000\004\061\306\001\002\000" +
    "\004\055\307\001\002\000\042\007\021\013\055\016\017" +
    "\017\041\022\023\023\065\025\050\026\031\027\012\032" +
    "\022\034\040\037\047\043\016\045\043\057\051\123\063" +
    "\001\002\000\044\007\021\013\055\016\017\017\041\022" +
    "\023\023\065\025\050\026\031\027\012\032\022\034\040" +
    "\037\047\043\016\045\043\056\311\057\051\123\063\001" +
    "\002\000\050\005\uffcc\007\uffcc\013\uffcc\016\uffcc\017\uffcc" +
    "\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032" +
    "\uffcc\034\uffcc\037\uffcc\043\uffcc\045\uffcc\056\uffcc\057\uffcc" +
    "\123\uffcc\001\002\000\020\007\uffc2\016\uffc2\022\uffc2\026" +
    "\uffc2\027\uffc2\032\uffc2\043\uffc2\001\002\000\004\060\317" +
    "\001\002\000\042\007\021\013\055\016\017\017\041\022" +
    "\023\023\065\025\050\026\031\027\012\032\022\034\040" +
    "\037\047\043\016\045\043\057\051\123\063\001\002\000" +
    "\044\007\021\013\055\016\017\017\041\022\023\023\065" +
    "\025\050\026\031\027\012\032\022\034\040\037\047\043" +
    "\016\045\043\056\316\057\051\123\063\001\002\000\050" +
    "\005\uffc9\007\uffc9\013\uffc9\016\uffc9\017\uffc9\022\uffc9\023" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\034\uffc9" +
    "\037\uffc9\043\uffc9\045\uffc9\056\uffc9\057\uffc9\123\uffc9\001" +
    "\002\000\016\050\100\051\074\052\077\053\076\062\103" +
    "\123\175\001\002\000\004\061\321\001\002\000\004\055" +
    "\322\001\002\000\042\007\021\013\055\016\017\017\041" +
    "\022\023\023\065\025\050\026\031\027\012\032\022\034" +
    "\040\037\047\043\016\045\043\057\051\123\063\001\002" +
    "\000\044\007\021\013\055\016\017\017\041\022\023\023" +
    "\065\025\050\026\031\027\012\032\022\034\040\037\047" +
    "\043\016\045\043\056\324\057\051\123\063\001\002\000" +
    "\050\005\uffca\007\uffca\013\uffca\016\uffca\017\uffca\022\uffca" +
    "\023\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032\uffca\034" +
    "\uffca\037\uffca\043\uffca\045\uffca\056\uffca\057\uffca\123\uffca" +
    "\001\002\000\004\123\326\001\002\000\006\061\327\133" +
    "\330\001\002\000\062\005\uffee\007\uffee\013\uffee\016\uffee" +
    "\017\uffee\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\031" +
    "\uffee\032\uffee\034\uffee\037\uffee\043\uffee\045\uffee\056\uffee" +
    "\057\uffee\062\uffee\063\uffee\064\uffee\074\uffee\123\uffee\126" +
    "\uffee\001\002\000\014\050\100\051\074\052\077\053\076" +
    "\062\103\001\002\000\004\132\332\001\002\000\004\061" +
    "\333\001\002\000\062\005\uffed\007\uffed\013\uffed\016\uffed" +
    "\017\uffed\022\uffed\023\uffed\025\uffed\026\uffed\027\uffed\031" +
    "\uffed\032\uffed\034\uffed\037\uffed\043\uffed\045\uffed\056\uffed" +
    "\057\uffed\062\uffed\063\uffed\064\uffed\074\uffed\123\uffed\126" +
    "\uffed\001\002\000\006\061\uffbe\127\uffbe\001\002\000\010" +
    "\061\uffc0\127\uffc0\131\336\001\002\000\006\061\uffbf\127" +
    "\uffbf\001\002\000\004\031\045\001\002\000\004\056\341" +
    "\001\002\000\020\007\uffc3\016\uffc3\022\uffc3\026\uffc3\027" +
    "\uffc3\032\uffc3\043\uffc3\001\002\000\004\123\uffdb\001\002" +
    "\000\004\116\344\001\002\000\004\055\345\001\002\000" +
    "\042\007\021\013\055\016\017\017\041\022\023\023\065" +
    "\025\050\026\031\027\012\032\022\034\040\037\047\043" +
    "\016\045\043\057\051\123\063\001\002\000\044\007\021" +
    "\013\055\016\017\017\041\022\023\023\065\025\050\026" +
    "\031\027\012\031\045\032\022\034\040\037\047\043\016" +
    "\045\043\057\051\123\063\001\002\000\004\056\350\001" +
    "\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\006\002\004\003\003\001\001\000\012\004" +
    "\014\022\012\026\017\027\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\023\022\012\026\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\031\041\032\042\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\031\042\333\001\001\000\002\001\001\000" +
    "\036\006\053\007\041\011\052\013\045\015\061\016\060" +
    "\021\066\022\065\024\051\025\057\030\056\037\063\040" +
    "\055\045\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\053\011\052\013\045\015" +
    "\061\016\060\021\066\022\065\024\221\030\056\037\063" +
    "\040\055\045\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\101\045\074" +
    "\001\001\000\002\001\001\000\004\043\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\123" +
    "\044\122\001\001\000\004\023\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\123\044\152\001\001" +
    "\000\004\023\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\156\022\065\001\001\000\006\023\173" +
    "\035\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\211\001\001\000\004\036\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\053\011\052\013\045\015\061\016\060\021\066\022\065" +
    "\024\051\025\220\030\056\037\063\040\055\045\043\001" +
    "\001\000\032\006\053\011\052\013\045\015\061\016\060" +
    "\021\066\022\065\024\221\030\056\037\063\040\055\045" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\053\011\052\013\045\015\061\016" +
    "\060\021\066\022\065\024\051\025\225\030\056\037\063" +
    "\040\055\045\043\001\001\000\032\006\053\011\052\013" +
    "\045\015\061\016\060\021\066\022\065\024\221\030\056" +
    "\037\063\040\055\045\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\173\035\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\173\035\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\053\011\052\013\045\015\061\016\060" +
    "\021\066\022\065\024\051\025\252\030\056\037\063\040" +
    "\055\045\043\001\001\000\032\006\053\011\052\013\045" +
    "\015\061\016\060\021\066\022\065\024\221\030\056\037" +
    "\063\040\055\045\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\261\032\260\033\262\001\001\000\006\033\274\034\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\264\001\001\000\002\001\001\000\034\006\053\011\052" +
    "\013\045\015\061\016\060\021\066\022\065\024\051\025" +
    "\266\030\056\037\063\040\055\045\043\001\001\000\032" +
    "\006\053\011\052\013\045\015\061\016\060\021\066\022" +
    "\065\024\221\030\056\037\063\040\055\045\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\053\011\052\013\045\015\061\016\060\021\066\022" +
    "\065\024\051\025\276\030\056\037\063\040\055\045\043" +
    "\001\001\000\032\006\053\011\052\013\045\015\061\016" +
    "\060\021\066\022\065\024\221\030\056\037\063\040\055" +
    "\045\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\173\035\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\053\011\052\013\045\015\061\016\060\021\066\022\065" +
    "\024\051\025\307\030\056\037\063\040\055\045\043\001" +
    "\001\000\032\006\053\011\052\013\045\015\061\016\060" +
    "\021\066\022\065\024\221\030\056\037\063\040\055\045" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\053\011\052\013\045\015\061\016" +
    "\060\021\066\022\065\024\051\025\314\030\056\037\063" +
    "\040\055\045\043\001\001\000\032\006\053\011\052\013" +
    "\045\015\061\016\060\021\066\022\065\024\221\030\056" +
    "\037\063\040\055\045\043\001\001\000\002\001\001\000" +
    "\006\023\173\035\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\053\011\052\013\045\015\061\016" +
    "\060\021\066\022\065\024\051\025\322\030\056\037\063" +
    "\040\055\045\043\001\001\000\032\006\053\011\052\013" +
    "\045\015\061\016\060\021\066\022\065\024\221\030\056" +
    "\037\063\040\055\045\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\053\011\052\013\045\015\061\016" +
    "\060\021\066\022\065\024\051\025\345\030\056\037\063" +
    "\040\055\045\043\001\001\000\034\006\053\007\346\011" +
    "\052\013\045\015\061\016\060\021\066\022\065\024\221" +
    "\030\056\037\063\040\055\045\043\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public void syntax_error(Symbol s) { 
        String errorMessage = "\u001B[33mError de sintaxis en línea " + s.left + ", columna " + s.right + ", símbolo \"" + s.value + "\"\u001B[0m";
        report_error(errorMessage, null);        
     } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        report_fatal_error("\u001B[33mValue: "+s.value+"\u001B[0m", null); 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerC$actions {
  private final CompilerC parser;

  /** Constructor */
  CUP$CompilerC$actions(CompilerC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerC$do_action(
    int                        CUP$CompilerC$act_num,
    java_cup.runtime.lr_parser CUP$CompilerC$parser,
    java.util.Stack            CUP$CompilerC$stack,
    int                        CUP$CompilerC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerC$result;

      /* select the action based on the action number */
      switch (CUP$CompilerC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RETURNS ::= RETURN VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RETURNS ::= RETURN INTS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERATORS ::= DIVISION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("OPERATORS",33, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERATORS ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("OPERATORS",33, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERATORS ::= SUMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("OPERATORS",33, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERATORS ::= RESTA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("OPERATORS",33, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICIONALES ::= DATO CONDICIONAL_LIST DATO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICIONALES ::= VAR_NAME CONDICIONAL_LIST DATO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICIONALES ::= VAR_NAME CONDICIONAL_LIST VAR_NAME 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICIONAL_LIST ::= OR 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICIONAL_LIST ::= AND 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICIONAL_LIST ::= NEGACION_LOGICA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICIONAL_LIST ::= IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICIONAL_LIST ::= DIFERENTE_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICIONAL_LIST ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICIONAL_LIST ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICIONAL_LIST ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICIONAL_LIST ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DEFAULT_SWITCH ::= DEFAULT DOS_PUNTOS DATAS_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DEFAULT_SWITCH",26, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASES ::= CASE DATO DOS_PUNTOS DATAS_FUNCTION BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES",25, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CASES_LIST ::= CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CASES_LIST ::= CASES_LIST CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DATA_SWITCH ::= CASES_LIST DEFAULT_SWITCH 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_SWITCH",23, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SWITCHS ::= SWITCH PARENTHESES_LEFT VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT DATA_SWITCH BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("SWITCHS",22, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROS ::= PARAMETROS COMA PARAMETRO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETRO ::= TIPO_DATO VAR_NAME LIST 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PARAMETRO",32, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETRO ::= TIPO_DATO VAR_NAME 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PARAMETRO",32, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCION ::= TIPO_DATO VAR_NAME PARENTHESES_LEFT PARAMETROS PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION ::= TIPO_DATO VAR_NAME PARENTHESES_LEFT PARAMETROS PARENTHESES_RIGHT BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= TIPO_DATO VAR_NAME LLAMADA_A_FUNCION BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PRINTFS ::= PRINTF PARENTHESES_LEFT STRINGS COMA VAR_NAME LIST_LEFT VAR_NAME LIST_RIGHT PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PRINTFS",4, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINTFS ::= PRINTF PARENTHESES_LEFT STRINGS PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)).right;
		Object info = (Object)((java_cup.runtime.Symbol) CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)).value;
		 System.out.println(((String) info).substring(1, ((String) info).length() - 1)); 
              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PRINTFS",4, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FORS ::= FOR PARENTHESES_LEFT VARS CONDICIONALES PUNTO_COMA VAR_NAME INCREMENTO PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FORS",9, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-10)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSES ::= ELSE BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("ELSES",30, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSEIFS ::= ELSE IF PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("ELSEIFS",29, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IFS ::= IF PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("IFS",7, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILES ::= WHILE PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("WHILES",11, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DO_WHILE ::= DO BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT WHILE PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DATO ::= FLOATS COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DATO ::= RESTA INTS COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DATO ::= INTS COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DATO ::= CHARS COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DATO ::= STRINGS COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DATO ::= FLOATS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DATO ::= RESTA INTS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DATO ::= INTS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DATO ::= CHARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DATO ::= STRINGS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARRAY_DATO ::= DATO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("ARRAY_DATO",34, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARRAY_DATO ::= ARRAY_DATO DATO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("ARRAY_DATO",34, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_DATO ::= VOID 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_DATO ::= LONG DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_DATO ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_DATO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARS ::= VAR_NAME LIST_LEFT VAR_NAME LIST_RIGHT IGUAL VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARS ::= TIPO_DATO VAR_NAME LIST IGUAL BRACKET_LEFT ARRAY_DATO BRACKET_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARS ::= VAR_NAME LIST_LEFT VAR_NAME LIST_RIGHT IGUAL VAR_NAME LIST_LEFT VAR_NAME LIST_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARS ::= TIPO_DATO VAR_NAME IGUAL VAR_NAME LIST_LEFT VAR_NAME LIST_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARS ::= TIPO_DATO VAR_NAME IGUAL VAR_NAME OPERATORS VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARS ::= TIPO_DATO VAR_NAME IGUAL VAR_NAME OPERATORS DATO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARS ::= TIPO_DATO VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARS ::= TIPO_DATO VAR_NAME IGUAL VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARS ::= TIPO_DATO VAR_NAME IGUAL DATO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARS ::= TIPO_DATO VAR_NAME IGUAL RUN_FUNCTION OPERATORS RUN_FUNCTION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARS ::= TIPO_DATO VAR_NAME IGUAL RUN_FUNCTION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RUN_FUNCTION ::= SIZEOF PARENTHESES_LEFT VAR_NAME LIST_LEFT DATO LIST_RIGHT PARENTHESES_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RUN_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RUN_FUNCTION ::= SIZEOF PARENTHESES_LEFT VAR_NAME PARENTHESES_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RUN_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RUN_FUNCTION ::= VAR_NAME PARENTHESES_LEFT VAR_NAME COMA VAR_NAME PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RUN_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RUN_FUNCTION ::= VAR_NAME PARENTHESES_LEFT ARRAY_DATO PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RUN_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATA_FUNCTION ::= RUN_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATA_FUNCTION ::= SWITCHS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATA_FUNCTION ::= VARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATA_FUNCTION ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATA_FUNCTION ::= WHILES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATA_FUNCTION ::= FORS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATA_FUNCTION ::= ELSES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATA_FUNCTION ::= ELSEIFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DATA_FUNCTION ::= IFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DATA_FUNCTION ::= PRINTFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DATAS_FUNCTION ::= DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DATAS_FUNCTION ::= DATAS_FUNCTION DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_main ::= INT MAIN LLAMADA_A_FUNCION BRACKET_LEFT DATAS_FUNCTION RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_main",2, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_lib ::= INCLUDE LIB 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_lib",1, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= dec_lib dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declarations ::= dec_lib FUNCIONES dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declarations EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).value;
		RESULT = start_val;
              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerC$parser.done_parsing();
          return CUP$CompilerC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

