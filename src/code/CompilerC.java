
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 16 15:43:26 CST 2024
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java_cup.sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 16 15:43:26 CST 2024
  */
public class CompilerC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerC() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\036\004\000\002\036\003\000\002\003\004" +
    "\000\002\004\011\000\002\026\004\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\022\007\000\002\022\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\004\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\017\007\000\002\016\006" +
    "\000\002\012\006\000\002\012\015\000\002\014\011\000" +
    "\002\006\007\000\002\006\011\000\002\007\007\000\002" +
    "\007\012\000\002\030\004\000\002\030\003\000\002\027" +
    "\010\000\002\027\013\000\002\031\011\000\002\032\004" +
    "\000\002\033\004\000\002\033\003\000\002\034\010\000" +
    "\002\035\005\000\002\010\005\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\014\007\001\002\000\020\007\023\014" +
    "\007\016\020\022\022\026\012\027\013\032\024\001\002" +
    "\000\020\007\ufffd\014\ufffd\016\ufffd\022\ufffd\026\ufffd\027" +
    "\ufffd\032\ufffd\001\002\000\004\002\011\001\002\000\004" +
    "\046\010\001\002\000\020\007\ufffc\014\ufffc\016\ufffc\022" +
    "\ufffc\026\ufffc\027\ufffc\032\ufffc\001\002\000\004\002\001" +
    "\001\002\000\006\054\052\124\uffed\001\002\000\006\016" +
    "\051\124\uffe9\001\002\000\004\124\027\001\002\000\016" +
    "\007\023\016\020\022\022\026\012\027\013\032\024\001" +
    "\002\000\004\002\uffff\001\002\000\020\007\ufffe\014\ufffe" +
    "\016\ufffe\022\ufffe\026\ufffe\027\ufffe\032\ufffe\001\002\000" +
    "\004\124\uffea\001\002\000\016\007\uffd9\016\uffd9\022\uffd9" +
    "\026\uffd9\027\uffd9\032\uffd9\001\002\000\004\124\uffec\001" +
    "\002\000\004\124\uffee\001\002\000\004\124\uffeb\001\002" +
    "\000\004\002\000\001\002\000\016\007\uffda\016\uffda\022" +
    "\uffda\026\uffda\027\uffda\032\uffda\001\002\000\006\061\031" +
    "\117\030\001\002\000\004\055\046\001\002\000\016\007" +
    "\023\016\020\022\022\026\033\027\013\032\024\001\002" +
    "\000\004\124\034\001\002\000\004\124\uffed\001\002\000" +
    "\004\062\035\001\002\000\004\055\036\001\002\000\004" +
    "\031\040\001\002\000\004\056\045\001\002\000\006\051" +
    "\041\124\042\001\002\000\004\130\044\001\002\000\004" +
    "\130\043\001\002\000\004\056\uffcf\001\002\000\004\056" +
    "\uffd0\001\002\000\016\007\uffd7\016\uffd7\022\uffd7\026\uffd7" +
    "\027\uffd7\032\uffd7\001\002\000\004\031\040\001\002\000" +
    "\004\056\050\001\002\000\016\007\uffd8\016\uffd8\022\uffd8" +
    "\026\uffd8\027\uffd8\032\uffd8\001\002\000\004\124\uffe8\001" +
    "\002\000\004\117\053\001\002\000\004\055\054\001\002" +
    "\000\034\007\023\013\067\016\020\022\022\023\074\025" +
    "\062\026\033\027\013\032\024\037\061\045\055\057\063" +
    "\060\056\001\002\000\004\117\206\001\002\000\004\061" +
    "\175\001\002\000\042\005\ufff5\007\ufff5\013\ufff5\016\ufff5" +
    "\022\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5\031\ufff5\032" +
    "\ufff5\037\ufff5\045\ufff5\056\ufff5\057\ufff5\060\ufff5\001\002" +
    "\000\042\005\ufff7\007\ufff7\013\ufff7\016\ufff7\022\ufff7\023" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\037\ufff7" +
    "\045\ufff7\056\ufff7\057\ufff7\060\ufff7\001\002\000\004\061" +
    "\152\001\002\000\006\061\136\117\135\001\002\000\004" +
    "\061\125\001\002\000\042\005\ufff9\007\ufff9\013\ufff9\016" +
    "\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9" +
    "\032\ufff9\037\ufff9\045\ufff9\056\ufff9\057\ufff9\060\ufff9\001" +
    "\002\000\042\005\ufff8\007\ufff8\013\ufff8\016\ufff8\022\ufff8" +
    "\023\ufff8\025\ufff8\026\ufff8\027\ufff8\031\ufff8\032\ufff8\037" +
    "\ufff8\045\ufff8\056\ufff8\057\ufff8\060\ufff8\001\002\000\042" +
    "\005\ufff6\007\ufff6\013\ufff6\016\ufff6\022\ufff6\023\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\031\ufff6\032\ufff6\037\ufff6\045\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\001\002\000\004\055\121\001" +
    "\002\000\042\005\ufff1\007\ufff1\013\ufff1\016\ufff1\022\ufff1" +
    "\023\ufff1\025\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1\037" +
    "\ufff1\045\ufff1\056\ufff1\057\ufff1\060\ufff1\001\002\000\036" +
    "\007\023\013\067\016\020\022\022\023\074\025\062\026" +
    "\033\027\013\031\040\032\024\037\061\045\055\057\063" +
    "\060\056\001\002\000\042\005\ufff3\007\ufff3\013\ufff3\016" +
    "\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3" +
    "\032\ufff3\037\ufff3\045\ufff3\056\ufff3\057\ufff3\060\ufff3\001" +
    "\002\000\042\005\ufff4\007\ufff4\013\ufff4\016\ufff4\022\ufff4" +
    "\023\ufff4\025\ufff4\026\ufff4\027\ufff4\031\ufff4\032\ufff4\037" +
    "\ufff4\045\ufff4\056\ufff4\057\ufff4\060\ufff4\001\002\000\004" +
    "\061\110\001\002\000\004\124\077\001\002\000\042\005" +
    "\ufff2\007\ufff2\013\ufff2\016\ufff2\022\ufff2\023\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\031\ufff2\032\ufff2\037\ufff2\045\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\001\002\000\006\126\100\130\101" +
    "\001\002\000\012\050\104\051\102\052\105\053\103\001" +
    "\002\000\042\005\uffef\007\uffef\013\uffef\016\uffef\022\uffef" +
    "\023\uffef\025\uffef\026\uffef\027\uffef\031\uffef\032\uffef\037" +
    "\uffef\045\uffef\056\uffef\057\uffef\060\uffef\001\002\000\010" +
    "\062\uffe5\130\uffe5\131\uffe5\001\002\000\010\062\uffe7\130" +
    "\uffe7\131\uffe7\001\002\000\010\062\uffe4\130\uffe4\131\uffe4" +
    "\001\002\000\010\062\uffe6\130\uffe6\131\uffe6\001\002\000" +
    "\004\130\107\001\002\000\042\005\ufff0\007\ufff0\013\ufff0" +
    "\016\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0\031" +
    "\ufff0\032\ufff0\037\ufff0\045\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\001\002\000\004\130\111\001\002\000\004\130\112\001" +
    "\002\000\004\062\113\001\002\000\004\055\114\001\002" +
    "\000\004\056\115\001\002\000\042\005\uffdf\007\uffdf\013" +
    "\uffdf\016\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\031\uffdf\032\uffdf\037\uffdf\045\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\001\002\000\004\056\120\001\002\000\042\005\ufffa" +
    "\007\ufffa\013\ufffa\016\ufffa\022\ufffa\023\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\037\ufffa\045\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\001\002\000\004\002\ufffb\001\002\000" +
    "\004\056\122\001\002\000\004\045\123\001\002\000\004" +
    "\117\124\001\002\000\042\005\uffe3\007\uffe3\013\uffe3\016" +
    "\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3" +
    "\032\uffe3\037\uffe3\045\uffe3\056\uffe3\057\uffe3\060\uffe3\001" +
    "\002\000\004\053\126\001\002\000\006\062\130\125\127" +
    "\001\002\000\012\050\104\051\102\052\105\053\103\001" +
    "\002\000\004\130\131\001\002\000\042\005\uffde\007\uffde" +
    "\013\uffde\016\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027" +
    "\uffde\031\uffde\032\uffde\037\uffde\045\uffde\056\uffde\057\uffde" +
    "\060\uffde\001\002\000\004\062\133\001\002\000\004\130" +
    "\134\001\002\000\042\005\uffdd\007\uffdd\013\uffdd\016\uffdd" +
    "\022\uffdd\023\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\037\uffdd\045\uffdd\056\uffdd\057\uffdd\060\uffdd\001\002" +
    "\000\004\055\150\001\002\000\004\124\137\001\002\000" +
    "\004\110\140\001\002\000\004\124\141\001\002\000\004" +
    "\114\142\001\002\000\004\124\143\001\002\000\004\110" +
    "\144\001\002\000\004\124\145\001\002\000\004\062\146" +
    "\001\002\000\034\007\023\013\067\016\020\022\022\023" +
    "\074\025\062\026\033\027\013\032\024\037\061\045\055" +
    "\057\063\060\056\001\002\000\042\005\uffe0\007\uffe0\013" +
    "\uffe0\016\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\031\uffe0\032\uffe0\037\uffe0\045\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\001\002\000\004\056\151\001\002\000\042\005\uffe1" +
    "\007\uffe1\013\uffe1\016\uffe1\022\uffe1\023\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\031\uffe1\032\uffe1\037\uffe1\045\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\001\002\000\004\124\153\001\002\000" +
    "\004\062\154\001\002\000\004\055\155\001\002\000\004" +
    "\006\161\001\002\000\006\006\161\012\170\001\002\000" +
    "\004\056\167\001\002\000\006\006\uffd3\012\uffd3\001\002" +
    "\000\012\050\104\051\102\052\105\053\103\001\002\000" +
    "\004\131\163\001\002\000\034\007\023\013\067\016\020" +
    "\022\022\023\074\025\062\026\033\027\013\032\024\037" +
    "\061\045\055\057\063\060\056\001\002\000\036\005\165" +
    "\007\023\013\067\016\020\022\022\023\074\025\062\026" +
    "\033\027\013\032\024\037\061\045\055\057\063\060\056" +
    "\001\002\000\004\130\166\001\002\000\006\006\uffd2\012" +
    "\uffd2\001\002\000\042\005\uffd6\007\uffd6\013\uffd6\016\uffd6" +
    "\022\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6\031\uffd6\032" +
    "\uffd6\037\uffd6\045\uffd6\056\uffd6\057\uffd6\060\uffd6\001\002" +
    "\000\004\131\173\001\002\000\004\056\uffd5\001\002\000" +
    "\006\006\uffd4\012\uffd4\001\002\000\034\007\023\013\067" +
    "\016\020\022\022\023\074\025\062\026\033\027\013\032" +
    "\024\037\061\045\055\057\063\060\056\001\002\000\036" +
    "\007\023\013\067\016\020\022\022\023\074\025\062\026" +
    "\033\027\013\032\024\037\061\045\055\056\uffd1\057\063" +
    "\060\056\001\002\000\004\053\176\001\002\000\006\062" +
    "\200\125\177\001\002\000\004\072\202\001\002\000\004" +
    "\130\201\001\002\000\042\005\uffdc\007\uffdc\013\uffdc\016" +
    "\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc" +
    "\032\uffdc\037\uffdc\045\uffdc\056\uffdc\057\uffdc\060\uffdc\001" +
    "\002\000\004\124\203\001\002\000\004\062\204\001\002" +
    "\000\004\130\205\001\002\000\042\005\uffdb\007\uffdb\013" +
    "\uffdb\016\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\031\uffdb\032\uffdb\037\uffdb\045\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\001\002\000\004\055\207\001\002\000\004\056\210" +
    "\001\002\000\042\005\uffe2\007\uffe2\013\uffe2\016\uffe2\022" +
    "\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2" +
    "\037\uffe2\045\uffe2\056\uffe2\057\uffe2\060\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\010\002\005\003\004\036\003\001\001\000" +
    "\014\003\016\004\015\023\013\027\020\030\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\024\023\013\027" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\006\064\007\057\012\065\014\056\016\072\017\071" +
    "\022\075\023\074\025\063\026\070\031\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\064\007" +
    "\057\010\115\012\065\014\056\016\072\017\071\022\075" +
    "\023\074\025\116\031\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\064\007\057\012" +
    "\065\014\056\016\072\017\071\022\075\023\074\025\146" +
    "\031\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\156\033\155\034\157\001\001\000" +
    "\006\034\171\035\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\161\001\001\000\002\001\001\000" +
    "\030\006\064\007\057\012\065\014\056\016\072\017\071" +
    "\022\075\023\074\025\063\026\163\031\067\001\001\000" +
    "\026\006\064\007\057\012\065\014\056\016\072\017\071" +
    "\022\075\023\074\025\116\031\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\064\007" +
    "\057\012\065\014\056\016\072\017\071\022\075\023\074" +
    "\025\063\026\173\031\067\001\001\000\026\006\064\007" +
    "\057\012\065\014\056\016\072\017\071\022\075\023\074" +
    "\025\116\031\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public void syntax_error(Symbol s) { 
        String errorMessage = "\u001B[33mError de sintaxis en línea " + s.left + ", columna " + s.right + ", símbolo \"" + s.value + "\"\u001B[0m";
        report_error(errorMessage, null);        
     } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        report_fatal_error("\u001B[33mValue: "+s.value+"\u001B[0m", null); 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerC$actions {
  private final CompilerC parser;

  /** Constructor */
  CUP$CompilerC$actions(CompilerC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerC$do_action(
    int                        CUP$CompilerC$act_num,
    java_cup.runtime.lr_parser CUP$CompilerC$parser,
    java.util.Stack            CUP$CompilerC$stack,
    int                        CUP$CompilerC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerC$result;

      /* select the action based on the action number */
      switch (CUP$CompilerC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETURNS ::= RETURN VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",6, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETURNS ::= RETURN INTS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",6, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEFAULT_SWITCH ::= DEFAULT DOS_PUNTOS DATAS_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DEFAULT_SWITCH",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASES ::= CASE DATO DOS_PUNTOS DATAS_FUNCTION BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASES_LIST ::= CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",25, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASES_LIST ::= CASES_LIST CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",25, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DATA_SWITCH ::= CASES_LIST DEFAULT_SWITCH 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_SWITCH",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCHS ::= SWITCH PARENTHESES_LEFT VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT DATA_SWITCH BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("SWITCHS",23, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= TIPO_DATO VAR_NAME PARENTHESES_LEFT TIPO_DATO VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= TIPO_DATO VAR_NAME LLAMADA_A_FUNCION BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SCANFS ::= SCANF PARENTHESES_LEFT STRINGS COMA AND_BINARIO VAR_NAME PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("SCANFS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SCANFS ::= SCANF PARENTHESES_LEFT STRINGS PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("SCANFS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRINTFS ::= PRINTF PARENTHESES_LEFT STRINGS COMA DATO PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PRINTFS",4, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRINTFS ::= PRINTF PARENTHESES_LEFT STRINGS PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PRINTFS",4, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FORS ::= FOR PARENTHESES_LEFT PUNTO_COMA PUNTO_COMA PARENTHESES_RIGHT BRACKET_LEFT BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FORS",10, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFS ::= IF PARENTHESES_LEFT VAR_NAME MAYOR_O_IGUAL_QUE VAR_NAME AND VAR_NAME MAYOR_O_IGUAL_QUE VAR_NAME PARENTHESES_RIGHT DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("IFS",8, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-10)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFS ::= IF LLAMADA_A_FUNCION BRACKET_LEFT BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("IFS",8, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WHILES ::= WHILE LLAMADA_A_FUNCION BRACKET_LEFT BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("WHILES",12, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DO_WHILE ::= DO BRACKET_LEFT BRACKET_RIGHT WHILE LLAMADA_A_FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",13, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DATO ::= FLOATS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DATO ::= INTS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DATO ::= CHARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DATO ::= STRINGS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_DATO ::= LONG DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_DATO ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_DATO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARS ::= TIPO_DATO VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARS ::= TIPO_DATO VAR_NAME IGUAL DATO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATA_FUNCTION ::= SWITCHS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATA_FUNCTION ::= VARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATA_FUNCTION ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATA_FUNCTION ::= WHILES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATA_FUNCTION ::= FORS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATA_FUNCTION ::= IFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATA_FUNCTION ::= SCANFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATA_FUNCTION ::= PRINTFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DATAS_FUNCTION ::= DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DATAS_FUNCTION ::= DATAS_FUNCTION DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_main ::= INT MAIN LLAMADA_A_FUNCION BRACKET_LEFT DATAS_FUNCTION RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_main",2, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_lib ::= INCLUDE LIB 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_lib",1, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_libs ::= dec_lib 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_libs",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_libs ::= dec_libs dec_lib 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_libs",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= dec_libs dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declarations ::= dec_libs FUNCIONES dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declarations EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).value;
		RESULT = start_val;
              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerC$parser.done_parsing();
          return CUP$CompilerC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

