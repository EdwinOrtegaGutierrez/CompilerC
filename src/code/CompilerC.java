
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 24 15:18:44 CST 2024
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java_cup.sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 24 15:18:44 CST 2024
  */
public class CompilerC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerC() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\004\011\000\002\025\004" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\021\007\000\002\021\007\000\002\021\005" +
    "\000\002\021\011\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\004\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\016\012\000\002\015\011\000\002\011\011\000" +
    "\002\037\012\000\002\040\006\000\002\013\015\000\002" +
    "\006\007\000\002\027\004\000\002\027\003\000\002\026" +
    "\010\000\002\026\012\000\002\042\004\000\002\042\005" +
    "\000\002\041\005\000\002\041\003\000\002\030\011\000" +
    "\002\031\004\000\002\032\004\000\002\032\003\000\002" +
    "\033\010\000\002\034\005\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\007\005\000\002\007\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\014\006\001\002\000\020\007\022\016" +
    "\017\022\023\026\011\027\012\032\021\043\016\001\002" +
    "\000\004\002\010\001\002\000\004\046\007\001\002\000" +
    "\020\007\ufffe\016\ufffe\022\ufffe\026\ufffe\027\ufffe\032\ufffe" +
    "\043\ufffe\001\002\000\004\002\001\001\002\000\006\054" +
    "\056\123\uffec\001\002\000\006\016\055\123\uffe8\001\002" +
    "\000\004\123\026\001\002\000\020\007\022\016\017\022" +
    "\023\026\011\027\012\032\021\043\016\001\002\000\004" +
    "\002\uffff\001\002\000\004\123\uffe6\001\002\000\004\123" +
    "\uffe9\001\002\000\020\007\uffd9\016\uffd9\022\uffd9\026\uffd9" +
    "\027\uffd9\032\uffd9\043\uffd9\001\002\000\004\123\uffea\001" +
    "\002\000\004\123\uffed\001\002\000\004\123\uffeb\001\002" +
    "\000\004\002\000\001\002\000\020\007\uffda\016\uffda\022" +
    "\uffda\026\uffda\027\uffda\032\uffda\043\uffda\001\002\000\006" +
    "\060\030\116\027\001\002\000\004\055\052\001\002\000" +
    "\020\007\022\016\017\022\023\026\031\027\012\032\021" +
    "\043\016\001\002\000\004\123\uffec\001\002\000\004\123" +
    "\050\001\002\000\006\061\036\127\035\001\002\000\006" +
    "\061\uffd3\127\uffd3\001\002\000\020\007\022\016\017\022" +
    "\023\026\031\027\012\032\021\043\016\001\002\000\004" +
    "\055\037\001\002\000\004\031\041\001\002\000\004\056" +
    "\046\001\002\000\006\051\042\123\043\001\002\000\004" +
    "\126\045\001\002\000\004\126\044\001\002\000\004\056" +
    "\uffbb\001\002\000\004\056\uffbc\001\002\000\020\007\uffd7" +
    "\016\uffd7\022\uffd7\026\uffd7\027\uffd7\032\uffd7\043\uffd7\001" +
    "\002\000\006\061\uffd4\127\uffd4\001\002\000\010\061\uffd6" +
    "\127\uffd6\131\051\001\002\000\006\061\uffd5\127\uffd5\001" +
    "\002\000\004\031\041\001\002\000\004\056\054\001\002" +
    "\000\020\007\uffd8\016\uffd8\022\uffd8\026\uffd8\027\uffd8\032" +
    "\uffd8\043\uffd8\001\002\000\004\123\uffe7\001\002\000\004" +
    "\116\057\001\002\000\004\055\060\001\002\000\036\007" +
    "\022\013\072\016\017\017\061\022\023\023\101\025\065" +
    "\026\031\027\012\032\021\037\064\043\016\045\062\057" +
    "\066\001\002\000\006\025\236\055\235\001\002\000\004" +
    "\060\227\001\002\000\044\005\ufff6\007\ufff6\013\ufff6\016" +
    "\ufff6\017\ufff6\022\ufff6\023\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\031\ufff6\032\ufff6\037\ufff6\043\ufff6\045\ufff6\056\ufff6\057" +
    "\ufff6\001\002\000\004\060\204\001\002\000\004\060\176" +
    "\001\002\000\004\060\172\001\002\000\044\005\ufffb\007" +
    "\ufffb\013\ufffb\016\ufffb\017\ufffb\022\ufffb\023\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\031\ufffb\032\ufffb\037\ufffb\043\ufffb\045" +
    "\ufffb\056\ufffb\057\ufffb\001\002\000\044\005\ufffa\007\ufffa" +
    "\013\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\037\ufffa\043\ufffa\045\ufffa" +
    "\056\ufffa\057\ufffa\001\002\000\044\005\ufff9\007\ufff9\013" +
    "\ufff9\016\ufff9\017\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\031\ufff9\032\ufff9\037\ufff9\043\ufff9\045\ufff9\056" +
    "\ufff9\057\ufff9\001\002\000\004\055\163\001\002\000\044" +
    "\005\ufff7\007\ufff7\013\ufff7\016\ufff7\017\ufff7\022\ufff7\023" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\037\ufff7" +
    "\043\ufff7\045\ufff7\056\ufff7\057\ufff7\001\002\000\044\005" +
    "\ufff2\007\ufff2\013\ufff2\016\ufff2\017\ufff2\022\ufff2\023\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\031\ufff2\032\ufff2\037\ufff2\043" +
    "\ufff2\045\ufff2\056\ufff2\057\ufff2\001\002\000\040\007\022" +
    "\013\072\016\017\017\061\022\023\023\101\025\065\026" +
    "\031\027\012\031\041\032\021\037\064\043\016\045\062" +
    "\057\066\001\002\000\044\005\ufff5\007\ufff5\013\ufff5\016" +
    "\ufff5\017\ufff5\022\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\031\ufff5\032\ufff5\037\ufff5\043\ufff5\045\ufff5\056\ufff5\057" +
    "\ufff5\001\002\000\044\005\ufff4\007\ufff4\013\ufff4\016\ufff4" +
    "\017\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\031" +
    "\ufff4\032\ufff4\037\ufff4\043\ufff4\045\ufff4\056\ufff4\057\ufff4" +
    "\001\002\000\044\005\ufff8\007\ufff8\013\ufff8\016\ufff8\017" +
    "\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8\027\ufff8\031\ufff8" +
    "\032\ufff8\037\ufff8\043\ufff8\045\ufff8\056\ufff8\057\ufff8\001" +
    "\002\000\004\060\126\001\002\000\004\123\104\001\002" +
    "\000\044\005\ufff3\007\ufff3\013\ufff3\016\ufff3\017\ufff3\022" +
    "\ufff3\023\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3" +
    "\037\ufff3\043\ufff3\045\ufff3\056\ufff3\057\ufff3\001\002\000" +
    "\006\124\105\126\106\001\002\000\014\050\111\051\107" +
    "\052\112\053\110\123\114\001\002\000\056\005\uffef\007" +
    "\uffef\013\uffef\016\uffef\017\uffef\022\uffef\023\uffef\025\uffef" +
    "\026\uffef\027\uffef\031\uffef\032\uffef\037\uffef\043\uffef\045" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\056\uffef\057\uffef" +
    "\123\uffef\001\002\000\032\061\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\100\uffe3\105\uffe3\107\uffe3\111\uffe3\113\uffe3\114\uffe3" +
    "\126\uffe3\130\uffe3\001\002\000\032\061\uffe5\066\uffe5\067" +
    "\uffe5\070\uffe5\100\uffe5\105\uffe5\107\uffe5\111\uffe5\113\uffe5" +
    "\114\uffe5\126\uffe5\130\uffe5\001\002\000\032\061\uffe2\066" +
    "\uffe2\067\uffe2\070\uffe2\100\uffe2\105\uffe2\107\uffe2\111\uffe2" +
    "\113\uffe2\114\uffe2\126\uffe2\130\uffe2\001\002\000\032\061" +
    "\uffe4\066\uffe4\067\uffe4\070\uffe4\100\uffe4\105\uffe4\107\uffe4" +
    "\111\uffe4\113\uffe4\114\uffe4\126\uffe4\130\uffe4\001\002\000" +
    "\004\126\125\001\002\000\014\062\116\063\121\064\120" +
    "\074\115\126\117\001\002\000\012\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\001\002\000\012\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\001\002\000\056\005\ufff0\007\ufff0\013\ufff0\016" +
    "\ufff0\017\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\031\ufff0\032\ufff0\037\ufff0\043\ufff0\045\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\056\ufff0\057\ufff0\123\ufff0\001\002" +
    "\000\012\050\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000" +
    "\012\050\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000\012" +
    "\050\111\051\107\052\112\053\110\001\002\000\004\126" +
    "\124\001\002\000\056\005\uffee\007\uffee\013\uffee\016\uffee" +
    "\017\uffee\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\031" +
    "\uffee\032\uffee\037\uffee\043\uffee\045\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\056\uffee\057\uffee\123\uffee\001\002\000" +
    "\056\005\ufff1\007\ufff1\013\ufff1\016\ufff1\017\ufff1\022\ufff1" +
    "\023\ufff1\025\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1\037" +
    "\ufff1\043\ufff1\045\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\056\ufff1\057\ufff1\123\ufff1\001\002\000\020\007\022\016" +
    "\017\022\023\026\031\027\012\032\021\043\016\001\002" +
    "\000\014\050\111\051\107\052\112\053\110\123\132\001" +
    "\002\000\004\126\151\001\002\000\024\066\142\067\136" +
    "\070\140\100\141\105\135\107\143\111\134\113\133\114" +
    "\144\001\002\000\024\066\142\067\136\070\140\100\141" +
    "\105\135\107\143\111\134\113\133\114\144\001\002\000" +
    "\014\050\uffc5\051\uffc5\052\uffc5\053\uffc5\123\uffc5\001\002" +
    "\000\014\050\uffc8\051\uffc8\052\uffc8\053\uffc8\123\uffc8\001" +
    "\002\000\014\050\uffca\051\uffca\052\uffca\053\uffca\123\uffca" +
    "\001\002\000\014\050\uffcc\051\uffcc\052\uffcc\053\uffcc\123" +
    "\uffcc\001\002\000\014\050\111\051\107\052\112\053\110" +
    "\123\146\001\002\000\014\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\123\uffc6\001\002\000\014\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\123\uffc7\001\002\000\014\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\123\uffcb\001\002\000\014\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\123\uffc9\001\002\000\014\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\123\uffc4\001\002\000\006\061\uffc2" +
    "\126\uffc2\001\002\000\006\061\uffc3\126\uffc3\001\002\000" +
    "\012\050\111\051\107\052\112\053\110\001\002\000\006" +
    "\061\uffc1\126\uffc1\001\002\000\004\123\152\001\002\000" +
    "\004\076\153\001\002\000\004\061\154\001\002\000\004" +
    "\055\155\001\002\000\036\007\022\013\072\016\017\017" +
    "\061\022\023\023\101\025\065\026\031\027\012\032\021" +
    "\037\064\043\016\045\062\057\066\001\002\000\040\007" +
    "\022\013\072\016\017\017\061\022\023\023\101\025\065" +
    "\026\031\027\012\032\021\037\064\043\016\045\062\056" +
    "\160\057\066\001\002\000\044\005\ufffc\007\ufffc\013\ufffc" +
    "\016\ufffc\017\ufffc\022\ufffc\023\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\031\ufffc\032\ufffc\037\ufffc\043\ufffc\045\ufffc\056\ufffc" +
    "\057\ufffc\001\002\000\044\005\uffdc\007\uffdc\013\uffdc\016" +
    "\uffdc\017\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\031\uffdc\032\uffdc\037\uffdc\043\uffdc\045\uffdc\056\uffdc\057" +
    "\uffdc\001\002\000\004\056\162\001\002\000\004\002\ufffd" +
    "\001\002\000\036\007\022\013\072\016\017\017\061\022" +
    "\023\023\101\025\065\026\031\027\012\032\021\037\064" +
    "\043\016\045\062\057\066\001\002\000\040\007\022\013" +
    "\072\016\017\017\061\022\023\023\101\025\065\026\031" +
    "\027\012\032\021\037\064\043\016\045\062\056\165\057" +
    "\066\001\002\000\004\045\166\001\002\000\004\060\167" +
    "\001\002\000\014\050\111\051\107\052\112\053\110\123" +
    "\132\001\002\000\004\061\171\001\002\000\044\005\uffe1" +
    "\007\uffe1\013\uffe1\016\uffe1\017\uffe1\022\uffe1\023\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\037\uffe1\043\uffe1" +
    "\045\uffe1\056\uffe1\057\uffe1\001\002\000\004\053\173\001" +
    "\002\000\004\061\174\001\002\000\004\126\175\001\002" +
    "\000\044\005\uffdb\007\uffdb\013\uffdb\016\uffdb\017\uffdb\022" +
    "\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb" +
    "\037\uffdb\043\uffdb\045\uffdb\056\uffdb\057\uffdb\001\002\000" +
    "\014\050\111\051\107\052\112\053\110\123\132\001\002" +
    "\000\004\061\200\001\002\000\004\055\201\001\002\000" +
    "\036\007\022\013\072\016\017\017\061\022\023\023\101" +
    "\025\065\026\031\027\012\032\021\037\064\043\016\045" +
    "\062\057\066\001\002\000\040\007\022\013\072\016\017" +
    "\017\061\022\023\023\101\025\065\026\031\027\012\032" +
    "\021\037\064\043\016\045\062\056\203\057\066\001\002" +
    "\000\044\005\uffdf\007\uffdf\013\uffdf\016\uffdf\017\uffdf\022" +
    "\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf" +
    "\037\uffdf\043\uffdf\045\uffdf\056\uffdf\057\uffdf\001\002\000" +
    "\004\123\205\001\002\000\004\061\206\001\002\000\004" +
    "\055\207\001\002\000\004\006\213\001\002\000\006\006" +
    "\213\012\222\001\002\000\004\056\221\001\002\000\006" +
    "\006\uffcf\012\uffcf\001\002\000\012\050\111\051\107\052" +
    "\112\053\110\001\002\000\004\130\215\001\002\000\036" +
    "\007\022\013\072\016\017\017\061\022\023\023\101\025" +
    "\065\026\031\027\012\032\021\037\064\043\016\045\062" +
    "\057\066\001\002\000\040\005\217\007\022\013\072\016" +
    "\017\017\061\022\023\023\101\025\065\026\031\027\012" +
    "\032\021\037\064\043\016\045\062\057\066\001\002\000" +
    "\004\126\220\001\002\000\006\006\uffce\012\uffce\001\002" +
    "\000\044\005\uffd2\007\uffd2\013\uffd2\016\uffd2\017\uffd2\022" +
    "\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\037\uffd2\043\uffd2\045\uffd2\056\uffd2\057\uffd2\001\002\000" +
    "\004\130\225\001\002\000\004\056\uffd1\001\002\000\006" +
    "\006\uffd0\012\uffd0\001\002\000\036\007\022\013\072\016" +
    "\017\017\061\022\023\023\101\025\065\026\031\027\012" +
    "\032\021\037\064\043\016\045\062\057\066\001\002\000" +
    "\040\007\022\013\072\016\017\017\061\022\023\023\101" +
    "\025\065\026\031\027\012\032\021\037\064\043\016\045" +
    "\062\056\uffcd\057\066\001\002\000\014\050\111\051\107" +
    "\052\112\053\110\123\132\001\002\000\004\061\231\001" +
    "\002\000\004\055\232\001\002\000\036\007\022\013\072" +
    "\016\017\017\061\022\023\023\101\025\065\026\031\027" +
    "\012\032\021\037\064\043\016\045\062\057\066\001\002" +
    "\000\040\007\022\013\072\016\017\017\061\022\023\023" +
    "\101\025\065\026\031\027\012\032\021\037\064\043\016" +
    "\045\062\056\234\057\066\001\002\000\044\005\uffe0\007" +
    "\uffe0\013\uffe0\016\uffe0\017\uffe0\022\uffe0\023\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\031\uffe0\032\uffe0\037\uffe0\043\uffe0\045" +
    "\uffe0\056\uffe0\057\uffe0\001\002\000\036\007\022\013\072" +
    "\016\017\017\061\022\023\023\101\025\065\026\031\027" +
    "\012\032\021\037\064\043\016\045\062\057\066\001\002" +
    "\000\004\060\237\001\002\000\014\050\111\051\107\052" +
    "\112\053\110\123\132\001\002\000\004\061\241\001\002" +
    "\000\004\055\242\001\002\000\036\007\022\013\072\016" +
    "\017\017\061\022\023\023\101\025\065\026\031\027\012" +
    "\032\021\037\064\043\016\045\062\057\066\001\002\000" +
    "\040\007\022\013\072\016\017\017\061\022\023\023\101" +
    "\025\065\026\031\027\012\032\021\037\064\043\016\045" +
    "\062\056\244\057\066\001\002\000\044\005\uffde\007\uffde" +
    "\013\uffde\016\uffde\017\uffde\022\uffde\023\uffde\025\uffde\026" +
    "\uffde\027\uffde\031\uffde\032\uffde\037\uffde\043\uffde\045\uffde" +
    "\056\uffde\057\uffde\001\002\000\040\007\022\013\072\016" +
    "\017\017\061\022\023\023\101\025\065\026\031\027\012" +
    "\032\021\037\064\043\016\045\062\056\246\057\066\001" +
    "\002\000\044\005\uffdd\007\uffdd\013\uffdd\016\uffdd\017\uffdd" +
    "\022\uffdd\023\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\037\uffdd\043\uffdd\045\uffdd\056\uffdd\057\uffdd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\004\003\003\001\001\000\012\004" +
    "\014\022\012\026\017\027\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\023\022\012\026\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\031\041\032\042\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\031\042\046\001\001\000\002\001\001\000" +
    "\004\007\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\067\011\070\013" +
    "\062\015\075\016\076\021\102\022\101\024\066\025\074" +
    "\030\073\037\077\040\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\067\007\160\011\070\013" +
    "\062\015\075\016\076\021\102\022\101\024\156\030\073" +
    "\037\077\040\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\126\022\101\001\001\000" +
    "\006\023\130\035\127\001\001\000\002\001\001\000\004" +
    "\036\146\001\001\000\004\036\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\067\011" +
    "\070\013\062\015\075\016\076\021\102\022\101\024\066" +
    "\025\155\030\073\037\077\040\072\001\001\000\030\006" +
    "\067\011\070\013\062\015\075\016\076\021\102\022\101" +
    "\024\156\030\073\037\077\040\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\067\011\070\013\062\015\075\016\076\021" +
    "\102\022\101\024\066\025\163\030\073\037\077\040\072" +
    "\001\001\000\030\006\067\011\070\013\062\015\075\016" +
    "\076\021\102\022\101\024\156\030\073\037\077\040\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\130\035\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\130\035\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\067\011\070\013" +
    "\062\015\075\016\076\021\102\022\101\024\066\025\201" +
    "\030\073\037\077\040\072\001\001\000\030\006\067\011" +
    "\070\013\062\015\075\016\076\021\102\022\101\024\156" +
    "\030\073\037\077\040\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\210\032\207\033\211\001\001\000\006\033\223\034" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\213\001\001\000\002\001\001\000\032\006\067\011" +
    "\070\013\062\015\075\016\076\021\102\022\101\024\066" +
    "\025\215\030\073\037\077\040\072\001\001\000\030\006" +
    "\067\011\070\013\062\015\075\016\076\021\102\022\101" +
    "\024\156\030\073\037\077\040\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\067\011" +
    "\070\013\062\015\075\016\076\021\102\022\101\024\066" +
    "\025\225\030\073\037\077\040\072\001\001\000\030\006" +
    "\067\011\070\013\062\015\075\016\076\021\102\022\101" +
    "\024\156\030\073\037\077\040\072\001\001\000\006\023" +
    "\130\035\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\067\011\070\013\062\015\075\016\076\021" +
    "\102\022\101\024\066\025\232\030\073\037\077\040\072" +
    "\001\001\000\030\006\067\011\070\013\062\015\075\016" +
    "\076\021\102\022\101\024\156\030\073\037\077\040\072" +
    "\001\001\000\002\001\001\000\032\006\067\011\070\013" +
    "\062\015\075\016\076\021\102\022\101\024\066\025\244" +
    "\030\073\037\077\040\072\001\001\000\002\001\001\000" +
    "\006\023\130\035\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\067\011\070\013\062\015\075\016" +
    "\076\021\102\022\101\024\066\025\242\030\073\037\077" +
    "\040\072\001\001\000\030\006\067\011\070\013\062\015" +
    "\075\016\076\021\102\022\101\024\156\030\073\037\077" +
    "\040\072\001\001\000\002\001\001\000\030\006\067\011" +
    "\070\013\062\015\075\016\076\021\102\022\101\024\156" +
    "\030\073\037\077\040\072\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public void syntax_error(Symbol s) { 
        String errorMessage = "\u001B[33mError de sintaxis en línea " + s.left + ", columna " + s.right + ", símbolo \"" + s.value + "\"\u001B[0m";
        report_error(errorMessage, null);        
     } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        report_fatal_error("\u001B[33mValue: "+s.value+"\u001B[0m", null); 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerC$actions {
  private final CompilerC parser;

  /** Constructor */
  CUP$CompilerC$actions(CompilerC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerC$do_action(
    int                        CUP$CompilerC$act_num,
    java_cup.runtime.lr_parser CUP$CompilerC$parser,
    java.util.Stack            CUP$CompilerC$stack,
    int                        CUP$CompilerC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerC$result;

      /* select the action based on the action number */
      switch (CUP$CompilerC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RETURNS ::= RETURN VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RETURNS ::= RETURN INTS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERATORS ::= DIVISION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("OPERATORS",33, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERATORS ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("OPERATORS",33, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERATORS ::= SUMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("OPERATORS",33, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERATORS ::= RESTA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("OPERATORS",33, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICIONALES ::= DATO CONDICIONAL_LIST DATO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICIONALES ::= VAR_NAME CONDICIONAL_LIST DATO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICIONALES ::= VAR_NAME CONDICIONAL_LIST VAR_NAME 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICIONAL_LIST ::= OR 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONAL_LIST ::= AND 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONAL_LIST ::= NEGACION_LOGICA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONAL_LIST ::= IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONAL_LIST ::= DIFERENTE_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONAL_LIST ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONAL_LIST ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONAL_LIST ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONAL_LIST ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEFAULT_SWITCH ::= DEFAULT DOS_PUNTOS DATAS_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DEFAULT_SWITCH",26, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASES ::= CASE DATO DOS_PUNTOS DATAS_FUNCTION BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES",25, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASES_LIST ::= CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASES_LIST ::= CASES_LIST CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DATA_SWITCH ::= CASES_LIST DEFAULT_SWITCH 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_SWITCH",23, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SWITCHS ::= SWITCH PARENTHESES_LEFT VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT DATA_SWITCH BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("SWITCHS",22, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETROS ::= PARAMETROS COMA PARAMETRO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETRO ::= TIPO_DATO VAR_NAME LIST 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PARAMETRO",32, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETRO ::= TIPO_DATO VAR_NAME 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PARAMETRO",32, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= TIPO_DATO VAR_NAME PARENTHESES_LEFT PARAMETROS PARENTHESES_RIGHT BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= TIPO_DATO VAR_NAME LLAMADA_A_FUNCION BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRINTFS ::= PRINTF PARENTHESES_LEFT STRINGS PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)).right;
		Object info = (Object)((java_cup.runtime.Symbol) CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)).value;
		 System.out.println(((String) info).substring(1, ((String) info).length() - 1)); 
              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PRINTFS",4, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FORS ::= FOR PARENTHESES_LEFT VARS CONDICIONALES PUNTO_COMA VAR_NAME INCREMENTO PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FORS",9, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-10)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSES ::= ELSE BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("ELSES",30, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSEIFS ::= ELSE IF PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("ELSEIFS",29, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFS ::= IF PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("IFS",7, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WHILES ::= WHILE PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("WHILES",11, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DO_WHILE ::= DO BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT WHILE PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DATO ::= FLOATS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DATO ::= INTS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DATO ::= CHARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DATO ::= STRINGS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_DATO ::= VOID 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_DATO ::= LONG DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_DATO ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_DATO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARS ::= TIPO_DATO VAR_NAME IGUAL VAR_NAME OPERATORS DATO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARS ::= TIPO_DATO VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARS ::= TIPO_DATO VAR_NAME IGUAL VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARS ::= TIPO_DATO VAR_NAME IGUAL DATO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATA_FUNCTION ::= SWITCHS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATA_FUNCTION ::= VARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATA_FUNCTION ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATA_FUNCTION ::= WHILES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATA_FUNCTION ::= FORS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATA_FUNCTION ::= ELSES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATA_FUNCTION ::= ELSEIFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DATA_FUNCTION ::= IFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DATA_FUNCTION ::= PRINTFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DATAS_FUNCTION ::= DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DATAS_FUNCTION ::= DATAS_FUNCTION DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_main ::= INT MAIN LLAMADA_A_FUNCION BRACKET_LEFT DATAS_FUNCTION RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_main",2, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_lib ::= INCLUDE LIB 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_lib",1, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= dec_lib dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declarations ::= dec_lib FUNCIONES dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declarations EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).value;
		RESULT = start_val;
              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerC$parser.done_parsing();
          return CUP$CompilerC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

