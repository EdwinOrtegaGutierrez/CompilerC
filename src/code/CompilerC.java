
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 17 11:27:51 CST 2024
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java_cup.sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 17 11:27:51 CST 2024
  */
public class CompilerC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerC() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\004\011\000\002\025\004" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\021\007\000\002\021" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\004\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\016\007\000\002\015" +
    "\006\000\002\011\006\000\002\013\011\000\002\006\007" +
    "\000\002\027\004\000\002\027\003\000\002\026\010\000" +
    "\002\026\013\000\002\030\011\000\002\031\004\000\002" +
    "\032\004\000\002\032\003\000\002\033\010\000\002\034" +
    "\005\000\002\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\004\014\006\001\002\000\016\007\021\016" +
    "\016\022\020\026\011\027\012\032\022\001\002\000\004" +
    "\002\010\001\002\000\004\046\007\001\002\000\016\007" +
    "\ufffe\016\ufffe\022\ufffe\026\ufffe\027\ufffe\032\ufffe\001\002" +
    "\000\004\002\001\001\002\000\006\054\050\123\ufff0\001" +
    "\002\000\006\016\047\123\uffec\001\002\000\004\123\025" +
    "\001\002\000\016\007\021\016\016\022\020\026\011\027" +
    "\012\032\022\001\002\000\004\002\uffff\001\002\000\004" +
    "\123\uffed\001\002\000\016\007\uffe0\016\uffe0\022\uffe0\026" +
    "\uffe0\027\uffe0\032\uffe0\001\002\000\004\123\uffef\001\002" +
    "\000\004\123\ufff1\001\002\000\004\123\uffee\001\002\000" +
    "\004\002\000\001\002\000\016\007\uffe1\016\uffe1\022\uffe1" +
    "\026\uffe1\027\uffe1\032\uffe1\001\002\000\006\060\027\116" +
    "\026\001\002\000\004\055\044\001\002\000\016\007\021" +
    "\016\016\022\020\026\031\027\012\032\022\001\002\000" +
    "\004\123\032\001\002\000\004\123\ufff0\001\002\000\004" +
    "\061\033\001\002\000\004\055\034\001\002\000\004\031" +
    "\036\001\002\000\004\056\043\001\002\000\006\051\037" +
    "\123\040\001\002\000\004\126\042\001\002\000\004\126" +
    "\041\001\002\000\004\056\uffd6\001\002\000\004\056\uffd7" +
    "\001\002\000\016\007\uffde\016\uffde\022\uffde\026\uffde\027" +
    "\uffde\032\uffde\001\002\000\004\031\036\001\002\000\004" +
    "\056\046\001\002\000\016\007\uffdf\016\uffdf\022\uffdf\026" +
    "\uffdf\027\uffdf\032\uffdf\001\002\000\004\123\uffeb\001\002" +
    "\000\004\116\051\001\002\000\004\055\052\001\002\000" +
    "\032\007\021\013\063\016\016\022\020\023\071\025\056" +
    "\026\031\027\012\032\022\037\055\045\053\057\057\001" +
    "\002\000\004\116\153\001\002\000\040\005\ufff8\007\ufff8" +
    "\013\ufff8\016\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\031\ufff8\032\ufff8\037\ufff8\045\ufff8\056\ufff8\057\ufff8" +
    "\001\002\000\004\060\130\001\002\000\004\116\125\001" +
    "\002\000\004\060\121\001\002\000\040\005\ufffb\007\ufffb" +
    "\013\ufffb\016\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\031\ufffb\032\ufffb\037\ufffb\045\ufffb\056\ufffb\057\ufffb" +
    "\001\002\000\040\005\ufffa\007\ufffa\013\ufffa\016\ufffa\022" +
    "\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\031\ufffa\032\ufffa" +
    "\037\ufffa\045\ufffa\056\ufffa\057\ufffa\001\002\000\040\005" +
    "\ufff9\007\ufff9\013\ufff9\016\ufff9\022\ufff9\023\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\031\ufff9\032\ufff9\037\ufff9\045\ufff9\056" +
    "\ufff9\057\ufff9\001\002\000\004\055\115\001\002\000\040" +
    "\005\ufff4\007\ufff4\013\ufff4\016\ufff4\022\ufff4\023\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\031\ufff4\032\ufff4\037\ufff4\045\ufff4" +
    "\056\ufff4\057\ufff4\001\002\000\034\007\021\013\063\016" +
    "\016\022\020\023\071\025\056\026\031\027\012\031\036" +
    "\032\022\037\055\045\053\057\057\001\002\000\040\005" +
    "\ufff6\007\ufff6\013\ufff6\016\ufff6\022\ufff6\023\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\031\ufff6\032\ufff6\037\ufff6\045\ufff6\056" +
    "\ufff6\057\ufff6\001\002\000\040\005\ufff7\007\ufff7\013\ufff7" +
    "\016\ufff7\022\ufff7\023\ufff7\025\ufff7\026\ufff7\027\ufff7\031" +
    "\ufff7\032\ufff7\037\ufff7\045\ufff7\056\ufff7\057\ufff7\001\002" +
    "\000\004\123\101\001\002\000\004\060\073\001\002\000" +
    "\040\005\ufff5\007\ufff5\013\ufff5\016\ufff5\022\ufff5\023\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\031\ufff5\032\ufff5\037\ufff5\045" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\004\126\074\001\002" +
    "\000\004\126\075\001\002\000\004\061\076\001\002\000" +
    "\004\055\077\001\002\000\004\056\100\001\002\000\040" +
    "\005\uffe3\007\uffe3\013\uffe3\016\uffe3\022\uffe3\023\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\031\uffe3\032\uffe3\037\uffe3\045\uffe3" +
    "\056\uffe3\057\uffe3\001\002\000\006\124\102\126\103\001" +
    "\002\000\012\050\106\051\104\052\107\053\105\001\002" +
    "\000\040\005\ufff2\007\ufff2\013\ufff2\016\ufff2\022\ufff2\023" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\031\ufff2\032\ufff2\037\ufff2" +
    "\045\ufff2\056\ufff2\057\ufff2\001\002\000\006\126\uffe8\127" +
    "\uffe8\001\002\000\006\126\uffea\127\uffea\001\002\000\006" +
    "\126\uffe7\127\uffe7\001\002\000\006\126\uffe9\127\uffe9\001" +
    "\002\000\004\126\111\001\002\000\040\005\ufff3\007\ufff3" +
    "\013\ufff3\016\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\031\ufff3\032\ufff3\037\ufff3\045\ufff3\056\ufff3\057\ufff3" +
    "\001\002\000\004\056\114\001\002\000\040\005\ufffc\007" +
    "\ufffc\013\ufffc\016\ufffc\022\ufffc\023\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\031\ufffc\032\ufffc\037\ufffc\045\ufffc\056\ufffc\057" +
    "\ufffc\001\002\000\004\002\ufffd\001\002\000\004\056\116" +
    "\001\002\000\004\045\117\001\002\000\004\116\120\001" +
    "\002\000\040\005\uffe6\007\uffe6\013\uffe6\016\uffe6\022\uffe6" +
    "\023\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6\037" +
    "\uffe6\045\uffe6\056\uffe6\057\uffe6\001\002\000\004\053\122" +
    "\001\002\000\004\061\123\001\002\000\004\126\124\001" +
    "\002\000\040\005\uffe2\007\uffe2\013\uffe2\016\uffe2\022\uffe2" +
    "\023\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2\037" +
    "\uffe2\045\uffe2\056\uffe2\057\uffe2\001\002\000\004\055\126" +
    "\001\002\000\004\056\127\001\002\000\040\005\uffe4\007" +
    "\uffe4\013\uffe4\016\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\031\uffe4\032\uffe4\037\uffe4\045\uffe4\056\uffe4\057" +
    "\uffe4\001\002\000\004\123\131\001\002\000\004\061\132" +
    "\001\002\000\004\055\133\001\002\000\004\006\137\001" +
    "\002\000\006\006\137\012\146\001\002\000\004\056\145" +
    "\001\002\000\006\006\uffda\012\uffda\001\002\000\012\050" +
    "\106\051\104\052\107\053\105\001\002\000\004\127\141" +
    "\001\002\000\032\007\021\013\063\016\016\022\020\023" +
    "\071\025\056\026\031\027\012\032\022\037\055\045\053" +
    "\057\057\001\002\000\034\005\143\007\021\013\063\016" +
    "\016\022\020\023\071\025\056\026\031\027\012\032\022" +
    "\037\055\045\053\057\057\001\002\000\004\126\144\001" +
    "\002\000\006\006\uffd9\012\uffd9\001\002\000\040\005\uffdd" +
    "\007\uffdd\013\uffdd\016\uffdd\022\uffdd\023\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\031\uffdd\032\uffdd\037\uffdd\045\uffdd\056\uffdd" +
    "\057\uffdd\001\002\000\004\127\151\001\002\000\004\056" +
    "\uffdc\001\002\000\006\006\uffdb\012\uffdb\001\002\000\032" +
    "\007\021\013\063\016\016\022\020\023\071\025\056\026" +
    "\031\027\012\032\022\037\055\045\053\057\057\001\002" +
    "\000\034\007\021\013\063\016\016\022\020\023\071\025" +
    "\056\026\031\027\012\032\022\037\055\045\053\056\uffd8" +
    "\057\057\001\002\000\004\055\154\001\002\000\004\056" +
    "\155\001\002\000\040\005\uffe5\007\uffe5\013\uffe5\016\uffe5" +
    "\022\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\032" +
    "\uffe5\037\uffe5\045\uffe5\056\uffe5\057\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\006\002\004\003\003\001\001\000\012\004" +
    "\014\022\012\026\016\027\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\022\022\012\026\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\060\011\061\013\053\015\066\016\065\021" +
    "\071\022\067\024\057\025\064\030\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\060\007\111\011\061\013\053\015\066\016\065" +
    "\021\071\022\067\024\112\030\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\134\032\133\033\135\001" +
    "\001\000\006\033\147\034\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\137\001\001\000\002\001" +
    "\001\000\026\006\060\011\061\013\053\015\066\016\065" +
    "\021\071\022\067\024\057\025\141\030\063\001\001\000" +
    "\024\006\060\011\061\013\053\015\066\016\065\021\071" +
    "\022\067\024\112\030\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\060\011\061\013" +
    "\053\015\066\016\065\021\071\022\067\024\057\025\151" +
    "\030\063\001\001\000\024\006\060\011\061\013\053\015" +
    "\066\016\065\021\071\022\067\024\112\030\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public void syntax_error(Symbol s) { 
        String errorMessage = "\u001B[33mError de sintaxis en línea " + s.left + ", columna " + s.right + ", símbolo \"" + s.value + "\"\u001B[0m";
        report_error(errorMessage, null);        
     } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        report_fatal_error("\u001B[33mValue: "+s.value+"\u001B[0m", null); 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerC$actions {
  private final CompilerC parser;

  /** Constructor */
  CUP$CompilerC$actions(CompilerC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerC$do_action(
    int                        CUP$CompilerC$act_num,
    java_cup.runtime.lr_parser CUP$CompilerC$parser,
    java.util.Stack            CUP$CompilerC$stack,
    int                        CUP$CompilerC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerC$result;

      /* select the action based on the action number */
      switch (CUP$CompilerC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETURNS ::= RETURN VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETURNS ::= RETURN INTS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEFAULT_SWITCH ::= DEFAULT DOS_PUNTOS DATAS_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DEFAULT_SWITCH",26, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASES ::= CASE DATO DOS_PUNTOS DATAS_FUNCTION BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES",25, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASES_LIST ::= CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASES_LIST ::= CASES_LIST CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DATA_SWITCH ::= CASES_LIST DEFAULT_SWITCH 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_SWITCH",23, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SWITCHS ::= SWITCH PARENTHESES_LEFT VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT DATA_SWITCH BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("SWITCHS",22, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= TIPO_DATO VAR_NAME PARENTHESES_LEFT TIPO_DATO VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION ::= TIPO_DATO VAR_NAME LLAMADA_A_FUNCION BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRINTFS ::= PRINTF PARENTHESES_LEFT STRINGS PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PRINTFS",4, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORS ::= FOR PARENTHESES_LEFT PUNTO_COMA PUNTO_COMA PARENTHESES_RIGHT BRACKET_LEFT BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FORS",9, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IFS ::= IF LLAMADA_A_FUNCION BRACKET_LEFT BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("IFS",7, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WHILES ::= WHILE LLAMADA_A_FUNCION BRACKET_LEFT BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("WHILES",11, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DO_WHILE ::= DO BRACKET_LEFT BRACKET_RIGHT WHILE LLAMADA_A_FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DATO ::= FLOATS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DATO ::= INTS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DATO ::= CHARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DATO ::= STRINGS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_DATO ::= LONG DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_DATO ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_DATO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARS ::= TIPO_DATO VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARS ::= TIPO_DATO VAR_NAME IGUAL DATO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATA_FUNCTION ::= SWITCHS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATA_FUNCTION ::= VARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATA_FUNCTION ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATA_FUNCTION ::= WHILES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATA_FUNCTION ::= FORS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DATA_FUNCTION ::= IFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DATA_FUNCTION ::= PRINTFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DATAS_FUNCTION ::= DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DATAS_FUNCTION ::= DATAS_FUNCTION DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_main ::= INT MAIN LLAMADA_A_FUNCION BRACKET_LEFT DATAS_FUNCTION RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_main",2, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_lib ::= INCLUDE LIB 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_lib",1, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= dec_lib dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declarations ::= dec_lib FUNCIONES dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declarations EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).value;
		RESULT = start_val;
              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerC$parser.done_parsing();
          return CUP$CompilerC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

