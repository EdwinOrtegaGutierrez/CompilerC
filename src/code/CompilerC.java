
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 20 21:33:18 CST 2024
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java_cup.sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 20 21:33:18 CST 2024
  */
public class CompilerC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerC() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\004\011\000\002\025\004" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\021\007\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\016\012\000\002\015\011\000\002\011\011" +
    "\000\002\037\012\000\002\040\006\000\002\013\015\000" +
    "\002\006\007\000\002\027\004\000\002\027\003\000\002" +
    "\026\010\000\002\026\013\000\002\030\011\000\002\031" +
    "\004\000\002\032\004\000\002\032\003\000\002\033\010" +
    "\000\002\034\005\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\014\006\001\002\000\016\007\020\016" +
    "\016\022\022\026\011\027\012\032\021\001\002\000\004" +
    "\002\010\001\002\000\004\046\007\001\002\000\016\007" +
    "\ufffe\016\ufffe\022\ufffe\026\ufffe\027\ufffe\032\ufffe\001\002" +
    "\000\004\002\001\001\002\000\006\054\050\123\uffee\001" +
    "\002\000\006\016\047\123\uffea\001\002\000\004\123\025" +
    "\001\002\000\016\007\020\016\016\022\022\026\011\027" +
    "\012\032\021\001\002\000\004\002\uffff\001\002\000\004" +
    "\123\uffeb\001\002\000\016\007\uffdc\016\uffdc\022\uffdc\026" +
    "\uffdc\027\uffdc\032\uffdc\001\002\000\004\123\uffef\001\002" +
    "\000\004\123\uffec\001\002\000\004\123\uffed\001\002\000" +
    "\004\002\000\001\002\000\016\007\uffdd\016\uffdd\022\uffdd" +
    "\026\uffdd\027\uffdd\032\uffdd\001\002\000\006\060\027\116" +
    "\026\001\002\000\004\055\044\001\002\000\016\007\020" +
    "\016\016\022\022\026\031\027\012\032\021\001\002\000" +
    "\004\123\032\001\002\000\004\123\uffee\001\002\000\004" +
    "\061\033\001\002\000\004\055\034\001\002\000\004\031" +
    "\036\001\002\000\004\056\043\001\002\000\006\051\037" +
    "\123\040\001\002\000\004\126\042\001\002\000\004\126" +
    "\041\001\002\000\004\056\uffc6\001\002\000\004\056\uffc7" +
    "\001\002\000\016\007\uffda\016\uffda\022\uffda\026\uffda\027" +
    "\uffda\032\uffda\001\002\000\004\031\036\001\002\000\004" +
    "\056\046\001\002\000\016\007\uffdb\016\uffdb\022\uffdb\026" +
    "\uffdb\027\uffdb\032\uffdb\001\002\000\004\123\uffe9\001\002" +
    "\000\004\116\051\001\002\000\004\055\052\001\002\000" +
    "\034\007\020\013\064\016\016\017\053\022\022\023\073" +
    "\025\057\026\031\027\012\032\021\037\056\045\054\057" +
    "\060\001\002\000\006\025\217\055\216\001\002\000\004" +
    "\060\210\001\002\000\042\005\ufff6\007\ufff6\013\ufff6\016" +
    "\ufff6\017\ufff6\022\ufff6\023\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\031\ufff6\032\ufff6\037\ufff6\045\ufff6\056\ufff6\057\ufff6\001" +
    "\002\000\004\060\165\001\002\000\004\060\157\001\002" +
    "\000\004\060\153\001\002\000\042\005\ufffb\007\ufffb\013" +
    "\ufffb\016\ufffb\017\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\031\ufffb\032\ufffb\037\ufffb\045\ufffb\056\ufffb\057" +
    "\ufffb\001\002\000\042\005\ufffa\007\ufffa\013\ufffa\016\ufffa" +
    "\017\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\031" +
    "\ufffa\032\ufffa\037\ufffa\045\ufffa\056\ufffa\057\ufffa\001\002" +
    "\000\042\005\ufff9\007\ufff9\013\ufff9\016\ufff9\017\ufff9\022" +
    "\ufff9\023\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9" +
    "\037\ufff9\045\ufff9\056\ufff9\057\ufff9\001\002\000\004\055" +
    "\144\001\002\000\042\005\ufff7\007\ufff7\013\ufff7\016\ufff7" +
    "\017\ufff7\022\ufff7\023\ufff7\025\ufff7\026\ufff7\027\ufff7\031" +
    "\ufff7\032\ufff7\037\ufff7\045\ufff7\056\ufff7\057\ufff7\001\002" +
    "\000\042\005\ufff2\007\ufff2\013\ufff2\016\ufff2\017\ufff2\022" +
    "\ufff2\023\ufff2\025\ufff2\026\ufff2\027\ufff2\031\ufff2\032\ufff2" +
    "\037\ufff2\045\ufff2\056\ufff2\057\ufff2\001\002\000\036\007" +
    "\020\013\064\016\016\017\053\022\022\023\073\025\057" +
    "\026\031\027\012\031\036\032\021\037\056\045\054\057" +
    "\060\001\002\000\042\005\ufff5\007\ufff5\013\ufff5\016\ufff5" +
    "\017\ufff5\022\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\037\ufff5\045\ufff5\056\ufff5\057\ufff5\001\002" +
    "\000\042\005\ufff4\007\ufff4\013\ufff4\016\ufff4\017\ufff4\022" +
    "\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\031\ufff4\032\ufff4" +
    "\037\ufff4\045\ufff4\056\ufff4\057\ufff4\001\002\000\042\005" +
    "\ufff8\007\ufff8\013\ufff8\016\ufff8\017\ufff8\022\ufff8\023\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\031\ufff8\032\ufff8\037\ufff8\045" +
    "\ufff8\056\ufff8\057\ufff8\001\002\000\004\060\107\001\002" +
    "\000\004\123\076\001\002\000\042\005\ufff3\007\ufff3\013" +
    "\ufff3\016\ufff3\017\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\031\ufff3\032\ufff3\037\ufff3\045\ufff3\056\ufff3\057" +
    "\ufff3\001\002\000\006\124\077\126\100\001\002\000\012" +
    "\050\103\051\101\052\104\053\102\001\002\000\054\005" +
    "\ufff0\007\ufff0\013\ufff0\016\ufff0\017\ufff0\022\ufff0\023\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\031\ufff0\032\ufff0\037\ufff0\045" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\056\ufff0\057\ufff0" +
    "\123\ufff0\001\002\000\032\061\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\100\uffe6\105\uffe6\107\uffe6\111\uffe6\113\uffe6\114\uffe6" +
    "\126\uffe6\127\uffe6\001\002\000\032\061\uffe8\066\uffe8\067" +
    "\uffe8\070\uffe8\100\uffe8\105\uffe8\107\uffe8\111\uffe8\113\uffe8" +
    "\114\uffe8\126\uffe8\127\uffe8\001\002\000\032\061\uffe5\066" +
    "\uffe5\067\uffe5\070\uffe5\100\uffe5\105\uffe5\107\uffe5\111\uffe5" +
    "\113\uffe5\114\uffe5\126\uffe5\127\uffe5\001\002\000\032\061" +
    "\uffe7\066\uffe7\067\uffe7\070\uffe7\100\uffe7\105\uffe7\107\uffe7" +
    "\111\uffe7\113\uffe7\114\uffe7\126\uffe7\127\uffe7\001\002\000" +
    "\004\126\106\001\002\000\054\005\ufff1\007\ufff1\013\ufff1" +
    "\016\ufff1\017\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\031\ufff1\032\ufff1\037\ufff1\045\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\056\ufff1\057\ufff1\123\ufff1\001\002\000" +
    "\016\007\020\016\016\022\022\026\031\027\012\032\021" +
    "\001\002\000\014\050\103\051\101\052\104\053\102\123" +
    "\113\001\002\000\004\126\132\001\002\000\024\066\123" +
    "\067\116\070\121\100\122\105\117\107\124\111\115\113" +
    "\114\114\125\001\002\000\024\066\123\067\116\070\121" +
    "\100\122\105\117\107\124\111\115\113\114\114\125\001" +
    "\002\000\014\050\uffcc\051\uffcc\052\uffcc\053\uffcc\123\uffcc" +
    "\001\002\000\014\050\uffcf\051\uffcf\052\uffcf\053\uffcf\123" +
    "\uffcf\001\002\000\014\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\123\uffd3\001\002\000\014\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\123\uffd1\001\002\000\014\050\103\051\101\052\104" +
    "\053\102\123\127\001\002\000\014\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\123\uffcd\001\002\000\014\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\123\uffce\001\002\000\014\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\123\uffd2\001\002\000\014\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\123\uffd0\001\002\000\014\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\123\uffcb\001\002\000\006" +
    "\061\uffc9\126\uffc9\001\002\000\006\061\uffca\126\uffca\001" +
    "\002\000\012\050\103\051\101\052\104\053\102\001\002" +
    "\000\006\061\uffc8\126\uffc8\001\002\000\004\123\133\001" +
    "\002\000\004\076\134\001\002\000\004\061\135\001\002" +
    "\000\004\055\136\001\002\000\034\007\020\013\064\016" +
    "\016\017\053\022\022\023\073\025\057\026\031\027\012" +
    "\032\021\037\056\045\054\057\060\001\002\000\036\007" +
    "\020\013\064\016\016\017\053\022\022\023\073\025\057" +
    "\026\031\027\012\032\021\037\056\045\054\056\141\057" +
    "\060\001\002\000\042\005\ufffc\007\ufffc\013\ufffc\016\ufffc" +
    "\017\ufffc\022\ufffc\023\ufffc\025\ufffc\026\ufffc\027\ufffc\031" +
    "\ufffc\032\ufffc\037\ufffc\045\ufffc\056\ufffc\057\ufffc\001\002" +
    "\000\042\005\uffdf\007\uffdf\013\uffdf\016\uffdf\017\uffdf\022" +
    "\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf" +
    "\037\uffdf\045\uffdf\056\uffdf\057\uffdf\001\002\000\004\056" +
    "\143\001\002\000\004\002\ufffd\001\002\000\034\007\020" +
    "\013\064\016\016\017\053\022\022\023\073\025\057\026" +
    "\031\027\012\032\021\037\056\045\054\057\060\001\002" +
    "\000\036\007\020\013\064\016\016\017\053\022\022\023" +
    "\073\025\057\026\031\027\012\032\021\037\056\045\054" +
    "\056\146\057\060\001\002\000\004\045\147\001\002\000" +
    "\004\060\150\001\002\000\014\050\103\051\101\052\104" +
    "\053\102\123\113\001\002\000\004\061\152\001\002\000" +
    "\042\005\uffe4\007\uffe4\013\uffe4\016\uffe4\017\uffe4\022\uffe4" +
    "\023\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\037" +
    "\uffe4\045\uffe4\056\uffe4\057\uffe4\001\002\000\004\053\154" +
    "\001\002\000\004\061\155\001\002\000\004\126\156\001" +
    "\002\000\042\005\uffde\007\uffde\013\uffde\016\uffde\017\uffde" +
    "\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde\031\uffde\032" +
    "\uffde\037\uffde\045\uffde\056\uffde\057\uffde\001\002\000\014" +
    "\050\103\051\101\052\104\053\102\123\113\001\002\000" +
    "\004\061\161\001\002\000\004\055\162\001\002\000\034" +
    "\007\020\013\064\016\016\017\053\022\022\023\073\025" +
    "\057\026\031\027\012\032\021\037\056\045\054\057\060" +
    "\001\002\000\036\007\020\013\064\016\016\017\053\022" +
    "\022\023\073\025\057\026\031\027\012\032\021\037\056" +
    "\045\054\056\164\057\060\001\002\000\042\005\uffe2\007" +
    "\uffe2\013\uffe2\016\uffe2\017\uffe2\022\uffe2\023\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\031\uffe2\032\uffe2\037\uffe2\045\uffe2\056" +
    "\uffe2\057\uffe2\001\002\000\004\123\166\001\002\000\004" +
    "\061\167\001\002\000\004\055\170\001\002\000\004\006" +
    "\174\001\002\000\006\006\174\012\203\001\002\000\004" +
    "\056\202\001\002\000\006\006\uffd6\012\uffd6\001\002\000" +
    "\012\050\103\051\101\052\104\053\102\001\002\000\004" +
    "\127\176\001\002\000\034\007\020\013\064\016\016\017" +
    "\053\022\022\023\073\025\057\026\031\027\012\032\021" +
    "\037\056\045\054\057\060\001\002\000\036\005\200\007" +
    "\020\013\064\016\016\017\053\022\022\023\073\025\057" +
    "\026\031\027\012\032\021\037\056\045\054\057\060\001" +
    "\002\000\004\126\201\001\002\000\006\006\uffd5\012\uffd5" +
    "\001\002\000\042\005\uffd9\007\uffd9\013\uffd9\016\uffd9\017" +
    "\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\031\uffd9" +
    "\032\uffd9\037\uffd9\045\uffd9\056\uffd9\057\uffd9\001\002\000" +
    "\004\127\206\001\002\000\004\056\uffd8\001\002\000\006" +
    "\006\uffd7\012\uffd7\001\002\000\034\007\020\013\064\016" +
    "\016\017\053\022\022\023\073\025\057\026\031\027\012" +
    "\032\021\037\056\045\054\057\060\001\002\000\036\007" +
    "\020\013\064\016\016\017\053\022\022\023\073\025\057" +
    "\026\031\027\012\032\021\037\056\045\054\056\uffd4\057" +
    "\060\001\002\000\014\050\103\051\101\052\104\053\102" +
    "\123\113\001\002\000\004\061\212\001\002\000\004\055" +
    "\213\001\002\000\034\007\020\013\064\016\016\017\053" +
    "\022\022\023\073\025\057\026\031\027\012\032\021\037" +
    "\056\045\054\057\060\001\002\000\036\007\020\013\064" +
    "\016\016\017\053\022\022\023\073\025\057\026\031\027" +
    "\012\032\021\037\056\045\054\056\215\057\060\001\002" +
    "\000\042\005\uffe3\007\uffe3\013\uffe3\016\uffe3\017\uffe3\022" +
    "\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3\032\uffe3" +
    "\037\uffe3\045\uffe3\056\uffe3\057\uffe3\001\002\000\034\007" +
    "\020\013\064\016\016\017\053\022\022\023\073\025\057" +
    "\026\031\027\012\032\021\037\056\045\054\057\060\001" +
    "\002\000\004\060\220\001\002\000\014\050\103\051\101" +
    "\052\104\053\102\123\113\001\002\000\004\061\222\001" +
    "\002\000\004\055\223\001\002\000\034\007\020\013\064" +
    "\016\016\017\053\022\022\023\073\025\057\026\031\027" +
    "\012\032\021\037\056\045\054\057\060\001\002\000\036" +
    "\007\020\013\064\016\016\017\053\022\022\023\073\025" +
    "\057\026\031\027\012\032\021\037\056\045\054\056\225" +
    "\057\060\001\002\000\042\005\uffe1\007\uffe1\013\uffe1\016" +
    "\uffe1\017\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\031\uffe1\032\uffe1\037\uffe1\045\uffe1\056\uffe1\057\uffe1\001" +
    "\002\000\036\007\020\013\064\016\016\017\053\022\022" +
    "\023\073\025\057\026\031\027\012\032\021\037\056\045" +
    "\054\056\227\057\060\001\002\000\042\005\uffe0\007\uffe0" +
    "\013\uffe0\016\uffe0\017\uffe0\022\uffe0\023\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\031\uffe0\032\uffe0\037\uffe0\045\uffe0\056\uffe0" +
    "\057\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\006\002\004\003\003\001\001\000\012\004" +
    "\014\022\012\026\016\027\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\022\022\012\026\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\061\011\062\013\054\015\067\016\070\021" +
    "\074\022\073\024\060\025\066\030\065\037\071\040\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\061\007\141\011\062\013\054\015\067\016\070\021" +
    "\074\022\073\024\137\030\065\037\071\040\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\107\022\073\001\001\000\006\023\111\035\110\001\001" +
    "\000\002\001\001\000\004\036\127\001\001\000\004\036" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\061\011\062\013\054\015\067\016\070" +
    "\021\074\022\073\024\060\025\136\030\065\037\071\040" +
    "\064\001\001\000\030\006\061\011\062\013\054\015\067" +
    "\016\070\021\074\022\073\024\137\030\065\037\071\040" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\061\011\062\013" +
    "\054\015\067\016\070\021\074\022\073\024\060\025\144" +
    "\030\065\037\071\040\064\001\001\000\030\006\061\011" +
    "\062\013\054\015\067\016\070\021\074\022\073\024\137" +
    "\030\065\037\071\040\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\111\035\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\111" +
    "\035\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\061\011\062\013\054\015\067\016\070\021\074" +
    "\022\073\024\060\025\162\030\065\037\071\040\064\001" +
    "\001\000\030\006\061\011\062\013\054\015\067\016\070" +
    "\021\074\022\073\024\137\030\065\037\071\040\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\171\032\170\033\172\001" +
    "\001\000\006\033\204\034\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\174\001\001\000\002\001" +
    "\001\000\032\006\061\011\062\013\054\015\067\016\070" +
    "\021\074\022\073\024\060\025\176\030\065\037\071\040" +
    "\064\001\001\000\030\006\061\011\062\013\054\015\067" +
    "\016\070\021\074\022\073\024\137\030\065\037\071\040" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\061\011\062\013\054\015\067\016\070" +
    "\021\074\022\073\024\060\025\206\030\065\037\071\040" +
    "\064\001\001\000\030\006\061\011\062\013\054\015\067" +
    "\016\070\021\074\022\073\024\137\030\065\037\071\040" +
    "\064\001\001\000\006\023\111\035\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\061\011\062\013" +
    "\054\015\067\016\070\021\074\022\073\024\060\025\213" +
    "\030\065\037\071\040\064\001\001\000\030\006\061\011" +
    "\062\013\054\015\067\016\070\021\074\022\073\024\137" +
    "\030\065\037\071\040\064\001\001\000\002\001\001\000" +
    "\032\006\061\011\062\013\054\015\067\016\070\021\074" +
    "\022\073\024\060\025\225\030\065\037\071\040\064\001" +
    "\001\000\002\001\001\000\006\023\111\035\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\061\011" +
    "\062\013\054\015\067\016\070\021\074\022\073\024\060" +
    "\025\223\030\065\037\071\040\064\001\001\000\030\006" +
    "\061\011\062\013\054\015\067\016\070\021\074\022\073" +
    "\024\137\030\065\037\071\040\064\001\001\000\002\001" +
    "\001\000\030\006\061\011\062\013\054\015\067\016\070" +
    "\021\074\022\073\024\137\030\065\037\071\040\064\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public void syntax_error(Symbol s) { 
        String errorMessage = "\u001B[33mError de sintaxis en línea " + s.left + ", columna " + s.right + ", símbolo \"" + s.value + "\"\u001B[0m";
        report_error(errorMessage, null);        
     } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        report_fatal_error("\u001B[33mValue: "+s.value+"\u001B[0m", null); 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerC$actions {
  private final CompilerC parser;

  /** Constructor */
  CUP$CompilerC$actions(CompilerC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerC$do_action(
    int                        CUP$CompilerC$act_num,
    java_cup.runtime.lr_parser CUP$CompilerC$parser,
    java.util.Stack            CUP$CompilerC$stack,
    int                        CUP$CompilerC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerC$result;

      /* select the action based on the action number */
      switch (CUP$CompilerC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RETURNS ::= RETURN VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETURNS ::= RETURN INTS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONALES ::= DATO CONDICIONAL_LIST DATO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONALES ::= VAR_NAME CONDICIONAL_LIST DATO 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONALES ::= VAR_NAME CONDICIONAL_LIST VAR_NAME 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",27, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONAL_LIST ::= OR 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONAL_LIST ::= AND 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICIONAL_LIST ::= NEGACION_LOGICA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONAL_LIST ::= IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONAL_LIST ::= DIFERENTE_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONAL_LIST ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONAL_LIST ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONAL_LIST ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONAL_LIST ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_LIST",28, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEFAULT_SWITCH ::= DEFAULT DOS_PUNTOS DATAS_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DEFAULT_SWITCH",26, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASES ::= CASE DATO DOS_PUNTOS DATAS_FUNCTION BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES",25, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASES_LIST ::= CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASES_LIST ::= CASES_LIST CASES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("CASES_LIST",24, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DATA_SWITCH ::= CASES_LIST DEFAULT_SWITCH 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_SWITCH",23, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCHS ::= SWITCH PARENTHESES_LEFT VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT DATA_SWITCH BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("SWITCHS",22, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= TIPO_DATO VAR_NAME PARENTHESES_LEFT TIPO_DATO VAR_NAME PARENTHESES_RIGHT BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= TIPO_DATO VAR_NAME LLAMADA_A_FUNCION BRACKET_LEFT RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCION",20, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRINTFS ::= PRINTF PARENTHESES_LEFT STRINGS PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PRINTFS",4, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FORS ::= FOR PARENTHESES_LEFT VARS CONDICIONALES PUNTO_COMA VAR_NAME INCREMENTO PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("FORS",9, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-10)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSES ::= ELSE BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("ELSES",30, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSEIFS ::= ELSE IF PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("ELSEIFS",29, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFS ::= IF PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("IFS",7, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILES ::= WHILE PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("WHILES",11, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DO_WHILE ::= DO BRACKET_LEFT DATAS_FUNCTION BRACKET_RIGHT WHILE PARENTHESES_LEFT CONDICIONALES PARENTHESES_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DATO ::= FLOATS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DATO ::= INTS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DATO ::= CHARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DATO ::= STRINGS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_DATO ::= LONG DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_DATO ::= LONG 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_DATO ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_DATO ::= SHORT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_DATO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_DATO ::= INT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_DATO ::= CHAR 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARS ::= TIPO_DATO VAR_NAME PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARS ::= TIPO_DATO VAR_NAME IGUAL DATO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("VARS",15, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATA_FUNCTION ::= SWITCHS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATA_FUNCTION ::= VARS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATA_FUNCTION ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATA_FUNCTION ::= WHILES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATA_FUNCTION ::= FORS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATA_FUNCTION ::= ELSES 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATA_FUNCTION ::= ELSEIFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DATA_FUNCTION ::= IFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DATA_FUNCTION ::= PRINTFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATA_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DATAS_FUNCTION ::= DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DATAS_FUNCTION ::= DATAS_FUNCTION DATA_FUNCTION 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("DATAS_FUNCTION",19, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_main ::= INT MAIN LLAMADA_A_FUNCION BRACKET_LEFT DATAS_FUNCTION RETURNS BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_main",2, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_lib ::= INCLUDE LIB 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_lib",1, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= dec_lib dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declarations ::= dec_lib FUNCIONES dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declarations EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).value;
		RESULT = start_val;
              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerC$parser.done_parsing();
          return CUP$CompilerC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

