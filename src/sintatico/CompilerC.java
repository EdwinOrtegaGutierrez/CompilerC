
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 21 15:47:43 CST 2024
//----------------------------------------------------

package sintatico;

import java_cup.runtime.*;
import java_cup.sym;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 21 15:47:43 CST 2024
  */
public class CompilerC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerC() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\004\007\000\002\005\003\000\002\005\002" +
    "\000\002\005\003\000\002\006\007\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\004\014\006\001\002\000\004\026\012\001" +
    "\002\000\004\002\010\001\002\000\004\046\007\001\002" +
    "\000\004\026\uffff\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\004\055\013\001\002\000\004" +
    "\056\014\001\002\000\010\031\017\057\ufffc\060\016\001" +
    "\002\000\004\057\ufffb\001\002\000\004\061\025\001\002" +
    "\000\004\026\023\001\002\000\004\057\022\001\002\000" +
    "\004\057\ufffd\001\002\000\004\002\ufffe\001\002\000\004" +
    "\126\024\001\002\000\004\057\ufff9\001\002\000\004\054" +
    "\026\001\002\000\004\062\027\001\002\000\004\126\030" +
    "\001\002\000\004\057\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\006\002\004\003\003\001\001\000\004\004" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\017\006\020\007\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerC$actions {
  private final CompilerC parser;

  /** Constructor */
  CUP$CompilerC$actions(CompilerC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerC$do_action(
    int                        CUP$CompilerC$act_num,
    java_cup.runtime.lr_parser CUP$CompilerC$parser,
    java.util.Stack            CUP$CompilerC$stack,
    int                        CUP$CompilerC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerC$result;

      /* select the action based on the action number */
      switch (CUP$CompilerC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RETURNS ::= RETURN INT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("RETURNS",5, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PRINTFS ::= PRINTF PARENTHESES_LEFT STRINGS PARENTHESES_RIGHT PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("PRINTFS",4, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // data_main ::= RETURNS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("data_main",3, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // data_main ::= 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("data_main",3, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // data_main ::= PRINTFS 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("data_main",3, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_main ::= INT MAIN BRACKET_LEFT data_main BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_main",2, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_lib ::= INCLUDE LIB 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("dec_lib",1, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declarations ::= dec_lib dec_main 
            {
              Object RESULT =null;

              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          return CUP$CompilerC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declarations EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)).value;
		RESULT = start_val;
              CUP$CompilerC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerC$stack.elementAt(CUP$CompilerC$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerC$parser.done_parsing();
          return CUP$CompilerC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

