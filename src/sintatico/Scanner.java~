/* The following code was generated by JFlex 1.6.1 */

/*
    ALVAREZ VELAZQUEZ EDOSN ALI
    ORTEGA GUTIERREZ EDWIN OMAR
    SANCHEZ REYES DANIA GUADALUPE
*/

/*  package lexico; */

package sintatico;

import java_cup.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/sintatico/c_lexer.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\56\1\57\1\57\1\56\22\0\1\55\1\41\1\60"+
    "\1\31\1\0\1\36\1\42\1\62\1\45\1\46\1\47\1\32\1\0"+
    "\1\34\1\0\1\35\12\63\1\52\1\51\1\37\1\33\1\40\2\0"+
    "\32\64\3\0\1\44\2\0\1\5\1\10\1\14\1\20\1\12\1\21"+
    "\1\4\1\16\1\17\1\61\1\13\1\1\1\22\1\3\1\2\1\27"+
    "\1\61\1\11\1\15\1\7\1\6\1\30\1\25\1\23\1\26\1\24"+
    "\1\53\1\43\1\54\1\50\6\0\1\57\32\0\1\0\u15df\0\1\0"+
    "\u097f\0\13\0\35\0\1\57\1\57\5\0\1\0\57\0\1\0\u0fa0\0"+
    "\1\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\21\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\2\1\1\22\3\1\30\1\31\10\3\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\0\1\41"+
    "\2\0\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\0\1\55\1\0\1\56"+
    "\1\0\26\3\1\57\3\3\1\60\6\3\4\0\1\61"+
    "\1\62\1\63\2\64\1\65\1\66\2\3\1\67\4\3"+
    "\1\70\1\71\3\3\1\72\1\73\11\3\1\74\3\3"+
    "\1\75\1\0\1\40\2\76\2\3\1\77\1\3\1\100"+
    "\4\3\1\101\2\3\1\102\5\3\1\103\1\104\2\3"+
    "\1\0\4\3\1\105\1\106\1\3\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\3\1\115\1\3\1\0\2\3"+
    "\1\116\2\3\1\117\1\3\1\0\1\120\1\121\1\122"+
    "\1\123\1\124\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\65\0\u06a0\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\237\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u0d40\0\u0d75"+
    "\0\65\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\65\0\u0e7e\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u06d5\0\u06d5"+
    "\0\u070a\0\u070a\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\237\0\u1376\0\u13ab\0\u13e0\0\237\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\65\0\65\0\65\0\u0eb3\0\u0ee8\0\u1627\0\237\0\u165c"+
    "\0\u1691\0\237\0\u16c6\0\u16fb\0\u1730\0\u1765\0\237\0\237"+
    "\0\u179a\0\u17cf\0\u1804\0\237\0\237\0\u1839\0\u186e\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\237\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\237\0\u1ab5\0\u0d75\0\65\0\u0daa\0\u1aea"+
    "\0\u1b1f\0\237\0\u1b54\0\237\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"+
    "\0\237\0\u1c5d\0\u1c92\0\237\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\237\0\237\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\237\0\237\0\u1f43\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\u1f78\0\237\0\u1fad\0\u1fe2\0\u2017"+
    "\0\u204c\0\237\0\u2081\0\u20b6\0\237\0\u20eb\0\u2120\0\237"+
    "\0\237\0\237\0\237\0\237\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\4\1\13\1\14\1\4\1\15\1\16"+
    "\1\17\1\20\2\4\1\21\1\4\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\2\50\1\0\1\51\1\4\1\52"+
    "\1\53\1\4\66\0\1\4\1\54\26\4\30\0\1\4"+
    "\1\0\2\4\1\0\30\4\30\0\1\4\1\0\2\4"+
    "\1\0\1\4\1\55\26\4\30\0\1\4\1\0\2\4"+
    "\1\0\2\4\1\56\25\4\30\0\1\4\1\0\2\4"+
    "\1\0\10\4\1\57\14\4\1\60\2\4\30\0\1\4"+
    "\1\0\2\4\1\0\10\4\1\61\17\4\30\0\1\4"+
    "\1\0\2\4\1\0\11\4\1\62\16\4\30\0\1\4"+
    "\1\0\2\4\1\0\1\63\1\4\1\64\17\4\1\65"+
    "\5\4\30\0\1\4\1\0\2\4\1\0\1\4\1\66"+
    "\2\4\1\67\10\4\1\70\12\4\30\0\1\4\1\0"+
    "\2\4\1\0\6\4\1\71\6\4\1\72\1\73\5\4"+
    "\1\74\3\4\30\0\1\4\1\0\2\4\1\0\2\4"+
    "\1\75\15\4\1\76\7\4\30\0\1\4\1\0\2\4"+
    "\1\0\1\4\1\77\7\4\1\100\16\4\30\0\1\4"+
    "\1\0\2\4\1\0\1\101\1\102\2\4\1\103\23\4"+
    "\30\0\1\4\1\0\2\4\1\0\4\4\1\104\23\4"+
    "\30\0\1\4\1\0\2\4\1\0\15\4\1\105\12\4"+
    "\30\0\1\4\1\0\2\4\1\0\10\4\1\106\17\4"+
    "\30\0\1\4\1\0\2\4\1\0\1\4\1\107\26\4"+
    "\30\0\1\4\1\0\2\4\17\0\1\110\77\0\1\111"+
    "\1\112\64\0\1\113\64\0\1\114\1\115\63\0\1\116"+
    "\1\0\1\117\11\0\1\120\50\0\1\121\31\0\1\122"+
    "\30\123\2\122\1\124\3\122\1\125\16\122\2\0\1\122"+
    "\1\123\3\122\33\0\1\126\4\0\1\127\57\0\1\130"+
    "\64\0\1\131\6\0\1\132\65\0\1\133\54\0\1\134"+
    "\77\0\1\135\51\0\1\136\31\0\56\137\2\0\1\140"+
    "\4\137\56\141\2\0\2\141\1\142\2\141\1\143\30\144"+
    "\25\143\2\0\1\143\1\144\1\143\1\53\1\144\1\0"+
    "\2\4\1\145\25\4\30\0\1\4\1\0\2\4\1\0"+
    "\6\4\1\146\21\4\30\0\1\4\1\0\2\4\1\0"+
    "\14\4\1\147\1\4\1\150\11\4\30\0\1\4\1\0"+
    "\2\4\1\0\5\4\1\151\22\4\30\0\1\4\1\0"+
    "\2\4\1\0\26\4\1\152\1\4\30\0\1\4\1\0"+
    "\2\4\1\0\11\4\1\153\16\4\30\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\154\2\4\1\155\21\4\30\0"+
    "\1\4\1\0\2\4\1\0\14\4\1\156\13\4\30\0"+
    "\1\4\1\0\2\4\1\0\5\4\1\157\22\4\30\0"+
    "\1\4\1\0\2\4\1\0\6\4\1\160\21\4\30\0"+
    "\1\4\1\0\2\4\1\0\2\4\1\161\25\4\30\0"+
    "\1\4\1\0\2\4\1\0\14\4\1\162\13\4\30\0"+
    "\1\4\1\0\2\4\1\0\4\4\1\163\23\4\30\0"+
    "\1\4\1\0\2\4\1\0\4\4\1\164\3\4\1\165"+
    "\17\4\30\0\1\4\1\0\2\4\1\0\1\4\1\166"+
    "\26\4\30\0\1\4\1\0\2\4\1\0\3\4\1\167"+
    "\17\4\1\170\4\4\30\0\1\4\1\0\2\4\1\0"+
    "\16\4\1\171\11\4\30\0\1\4\1\0\2\4\1\0"+
    "\6\4\1\172\21\4\30\0\1\4\1\0\2\4\1\0"+
    "\5\4\1\173\22\4\30\0\1\4\1\0\2\4\1\0"+
    "\20\4\1\174\7\4\30\0\1\4\1\0\2\4\1\0"+
    "\1\4\1\175\26\4\30\0\1\4\1\0\2\4\1\0"+
    "\10\4\1\176\17\4\30\0\1\4\1\0\2\4\1\0"+
    "\1\177\27\4\30\0\1\4\1\0\2\4\1\0\16\4"+
    "\1\200\11\4\30\0\1\4\1\0\2\4\1\0\16\4"+
    "\1\201\11\4\30\0\1\4\1\0\2\4\1\0\16\4"+
    "\1\202\11\4\30\0\1\4\1\0\2\4\1\0\1\203"+
    "\15\4\1\204\11\4\30\0\1\4\1\0\2\4\3\0"+
    "\1\205\61\0\56\117\2\0\5\117\47\120\1\206\15\120"+
    "\16\0\1\207\46\0\1\122\15\123\1\210\12\123\25\122"+
    "\2\0\1\122\1\123\3\122\16\0\1\207\21\0\1\211"+
    "\42\0\1\207\14\0\1\212\64\0\1\213\114\0\1\214"+
    "\2\0\30\4\30\0\1\4\1\0\1\215\1\4\1\0"+
    "\3\4\1\216\24\4\30\0\1\4\1\0\2\4\1\0"+
    "\1\4\1\217\26\4\30\0\1\4\1\0\2\4\1\0"+
    "\16\4\1\220\11\4\30\0\1\4\1\0\2\4\1\0"+
    "\1\4\1\221\26\4\30\0\1\4\1\0\2\4\1\0"+
    "\11\4\1\222\16\4\30\0\1\4\1\0\2\4\1\0"+
    "\11\4\1\223\16\4\30\0\1\4\1\0\2\4\1\0"+
    "\4\4\1\224\23\4\30\0\1\4\1\0\2\4\1\0"+
    "\16\4\1\225\11\4\30\0\1\4\1\0\2\4\1\0"+
    "\5\4\1\226\22\4\30\0\1\4\1\0\2\4\1\0"+
    "\11\4\1\227\16\4\30\0\1\4\1\0\2\4\1\0"+
    "\21\4\1\230\6\4\30\0\1\4\1\0\2\4\1\0"+
    "\11\4\1\231\16\4\30\0\1\4\1\0\2\4\1\0"+
    "\6\4\1\232\5\4\1\233\13\4\30\0\1\4\1\0"+
    "\2\4\1\0\11\4\1\234\16\4\30\0\1\4\1\0"+
    "\2\4\1\0\10\4\1\235\17\4\30\0\1\4\1\0"+
    "\2\4\1\0\6\4\1\236\21\4\30\0\1\4\1\0"+
    "\2\4\1\0\5\4\1\237\22\4\30\0\1\4\1\0"+
    "\2\4\1\0\10\4\1\240\17\4\30\0\1\4\1\0"+
    "\2\4\1\0\2\4\1\241\25\4\30\0\1\4\1\0"+
    "\2\4\1\0\11\4\1\242\16\4\30\0\1\4\1\0"+
    "\2\4\1\0\6\4\1\243\21\4\30\0\1\4\1\0"+
    "\2\4\1\0\7\4\1\244\20\4\30\0\1\4\1\0"+
    "\2\4\1\0\4\4\1\245\23\4\30\0\1\4\1\0"+
    "\2\4\1\0\4\4\1\246\23\4\30\0\1\4\1\0"+
    "\2\4\1\0\14\4\1\151\13\4\30\0\1\4\1\0"+
    "\2\4\1\0\2\4\1\247\25\4\30\0\1\4\1\0"+
    "\2\4\1\0\1\250\27\4\30\0\1\4\1\0\2\4"+
    "\1\0\2\4\1\251\25\4\30\0\1\4\1\0\2\4"+
    "\1\0\4\4\1\252\23\4\30\0\1\4\1\0\2\4"+
    "\1\0\17\4\1\253\10\4\30\0\1\4\1\0\2\4"+
    "\14\0\1\254\50\0\35\120\1\255\11\120\1\206\15\120"+
    "\40\0\1\256\24\0\1\122\15\123\1\210\12\123\7\122"+
    "\1\257\15\122\2\0\1\122\1\123\3\122\1\0\4\4"+
    "\1\260\23\4\30\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\261\24\4\30\0\1\4\1\0\2\4\1\0\2\4"+
    "\1\262\25\4\30\0\1\4\1\0\2\4\1\0\17\4"+
    "\1\263\10\4\30\0\1\4\1\0\2\4\1\0\12\4"+
    "\1\264\15\4\30\0\1\4\1\0\2\4\1\0\14\4"+
    "\1\265\13\4\30\0\1\4\1\0\2\4\1\0\10\4"+
    "\1\266\17\4\30\0\1\4\1\0\2\4\1\0\10\4"+
    "\1\267\17\4\30\0\1\4\1\0\2\4\1\0\16\4"+
    "\1\270\11\4\30\0\1\4\1\0\2\4\1\0\6\4"+
    "\1\271\21\4\30\0\1\4\1\0\2\4\1\0\16\4"+
    "\1\272\11\4\30\0\1\4\1\0\2\4\1\0\13\4"+
    "\1\273\14\4\30\0\1\4\1\0\2\4\1\0\6\4"+
    "\1\274\21\4\30\0\1\4\1\0\2\4\1\0\11\4"+
    "\1\275\16\4\30\0\1\4\1\0\2\4\1\0\1\4"+
    "\1\276\26\4\30\0\1\4\1\0\2\4\1\0\13\4"+
    "\1\277\14\4\30\0\1\4\1\0\2\4\1\0\1\300"+
    "\27\4\30\0\1\4\1\0\2\4\1\0\5\4\1\301"+
    "\22\4\30\0\1\4\1\0\2\4\1\0\6\4\1\302"+
    "\21\4\30\0\1\4\1\0\2\4\1\0\11\4\1\303"+
    "\16\4\30\0\1\4\1\0\2\4\1\0\6\4\1\304"+
    "\21\4\30\0\1\4\1\0\2\4\1\0\6\4\1\305"+
    "\21\4\30\0\1\4\1\0\2\4\1\0\1\306\64\0"+
    "\5\4\1\307\22\4\30\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\310\25\4\30\0\1\4\1\0\2\4\1\0"+
    "\11\4\1\311\16\4\30\0\1\4\1\0\2\4\1\0"+
    "\6\4\1\312\21\4\30\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\313\25\4\30\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\314\25\4\30\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\315\25\4\30\0\1\4\1\0\2\4\1\0"+
    "\13\4\1\316\14\4\30\0\1\4\1\0\2\4\1\0"+
    "\6\4\1\317\21\4\30\0\1\4\1\0\2\4\1\0"+
    "\17\4\1\320\10\4\30\0\1\4\1\0\2\4\1\0"+
    "\20\4\1\321\7\4\30\0\1\4\1\0\2\4\1\0"+
    "\15\4\1\322\12\4\30\0\1\4\1\0\2\4\1\0"+
    "\11\4\1\323\16\4\30\0\1\4\1\0\2\4\1\0"+
    "\1\324\27\4\30\0\1\4\1\0\2\4\1\0\20\4"+
    "\1\325\7\4\30\0\1\4\1\0\2\4\1\0\16\4"+
    "\1\326\11\4\30\0\1\4\1\0\2\4\6\0\1\327"+
    "\57\0\6\4\1\330\21\4\30\0\1\4\1\0\2\4"+
    "\1\0\11\4\1\331\16\4\30\0\1\4\1\0\2\4"+
    "\1\0\20\4\1\332\7\4\30\0\1\4\1\0\2\4"+
    "\1\0\11\4\1\333\16\4\30\0\1\4\1\0\2\4"+
    "\1\0\5\4\1\334\22\4\30\0\1\4\1\0\2\4"+
    "\1\0\6\4\1\335\21\4\30\0\1\4\1\0\2\4"+
    "\1\0\1\336\27\4\30\0\1\4\1\0\2\4\20\0"+
    "\1\337\45\0\1\4\1\340\26\4\30\0\1\4\1\0"+
    "\2\4\1\0\17\4\1\341\10\4\30\0\1\4\1\0"+
    "\2\4\1\0\10\4\1\342\17\4\30\0\1\4\1\0"+
    "\2\4\1\0\11\4\1\343\16\4\30\0\1\4\1\0"+
    "\2\4\1\0\11\4\1\344\16\4\30\0\1\4\1\0"+
    "\2\4\12\0\1\345\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8533];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\36\1\1\11\1\1\6\11\37\1\1\0"+
    "\6\11\1\1\1\0\1\11\2\0\2\1\1\11\1\1"+
    "\7\11\1\0\1\1\1\0\1\1\1\0\41\1\4\0"+
    "\3\11\40\1\1\0\1\1\1\11\27\1\1\0\20\1"+
    "\1\0\7\1\1\0\5\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.INTS, yytext());
            }
          case 86: break;
          case 2: 
            { System.out.println("Simbolo no reconocido: " + yytext());
            }
          case 87: break;
          case 3: 
            { return symbol(sym.VAR_NAME, yytext());
            }
          case 88: break;
          case 4: 
            { /*Suma */
    return symbol(sym.SUMA, yytext());
            }
          case 89: break;
          case 5: 
            { /*Asignación básica */
    return symbol(sym.IGUAL, yytext());
            }
          case 90: break;
          case 6: 
            { /*Resta */
    return symbol(sym.RESTA, yytext());
            }
          case 91: break;
          case 7: 
            { /*Division */
    return symbol(sym.DIVISION, yytext());
            }
          case 92: break;
          case 8: 
            { /*Módulo */
    return symbol(sym.MODULO, yytext());
            }
          case 93: break;
          case 9: 
            { /*Menor que */
    return symbol(sym.MENOR_QUE, yytext());
            }
          case 94: break;
          case 10: 
            { /*Mayor que */
    return symbol(sym.MAYOR_QUE, yytext());
            }
          case 95: break;
          case 11: 
            { /*Negación lógica (NOT) */
    return symbol(sym.NEGACION_LOGICA, yytext());
            }
          case 96: break;
          case 12: 
            { /*AND binario*/
    return symbol(sym.AND_BINARIO, yytext());
            }
          case 97: break;
          case 13: 
            { /*OR binario */
    return symbol(sym.OR_BINARIO, yytext());
            }
          case 98: break;
          case 14: 
            { /*XOR binario */
    return symbol(sym.XOR_BINARIO, yytext());
            }
          case 99: break;
          case 15: 
            { return symbol(sym.PARENTHESES_LEFT, yytext());
            }
          case 100: break;
          case 16: 
            { return symbol(sym.PARENTHESES_RIGHT, yytext());
            }
          case 101: break;
          case 17: 
            { /*Multiplicacion */
    return symbol(sym.MULTIPLICACION, yytext());
            }
          case 102: break;
          case 18: 
            { /*Complemento a uno */
    return symbol(sym.COMPLEMENTO_A_UNO, yytext());
            }
          case 103: break;
          case 19: 
            { return symbol(sym.PUNTO_COMA, yytext());
            }
          case 104: break;
          case 20: 
            { return symbol(sym.DOS_PUNTOS, yytext());
            }
          case 105: break;
          case 21: 
            { return symbol(sym.BRACKET_LEFT, yytext());
            }
          case 106: break;
          case 22: 
            { return symbol(sym.BRACKET_RIGHT, yytext());
            }
          case 107: break;
          case 23: 
            { /* Acciones específicas para salto de línea */
            }
          case 108: break;
          case 24: 
            { /*Especifica una condicion*/
    return symbol(sym.IF, yytext());
            }
          case 109: break;
          case 25: 
            { /*Especifica el inicio de un bucle do-while */
    return symbol(sym.DO, yytext());
            }
          case 110: break;
          case 26: 
            { /*Incremento */
    return symbol(sym.INCREMENTO, yytext());
            }
          case 111: break;
          case 27: 
            { /*Suma y asignacion */
    return symbol(sym.SUMA_ASIGNACION, yytext());
            }
          case 112: break;
          case 28: 
            { /*Igual que */
    return symbol(sym.IGUAL_QUE, yytext());
            }
          case 113: break;
          case 29: 
            { /*Resta y asignación */
    return symbol(sym.RESTA_ASIGNACION, yytext());
            }
          case 114: break;
          case 30: 
            { /*Decremento */
    return symbol(sym.DECREMENTO, yytext());
            }
          case 115: break;
          case 31: 
            { /*División y asignación */
    return symbol(sym.DIVISION_ASIGNACION, yytext());
            }
          case 116: break;
          case 32: 
            { /* Comentarios multilinea y unilinea */
            }
          case 117: break;
          case 33: 
            { /*Módulo y asignación */
    return symbol(sym.MODULO_Y_ASIGNACION, yytext());
            }
          case 118: break;
          case 34: 
            { /*Menor o igual que */
    return symbol(sym.MENOR_O_IGUAL_QUE, yytext());
            }
          case 119: break;
          case 35: 
            { /*Desplazamiento a la izquierda */
    return symbol(sym.DESPLAZAMIENTO_IZQUIERDA, yytext());
            }
          case 120: break;
          case 36: 
            { /*Mayor que o igual que */
    return symbol(sym.MAYOR_O_IGUAL_QUE, yytext());
            }
          case 121: break;
          case 37: 
            { /*Desplazamiento a la derecha */
    return symbol(sym.DESPLAZAMIENTO_DERECHA, yytext());
            }
          case 122: break;
          case 38: 
            { /*Diferente que / No igual que */
    return symbol(sym.DIFERENTE_QUE, yytext());
            }
          case 123: break;
          case 39: 
            { /*Asignación con AND binario */
    return symbol(sym.ASIGNACION_AND, yytext());
            }
          case 124: break;
          case 40: 
            { /*Y lógico (AND) */
    return symbol(sym.AND, yytext());
            }
          case 125: break;
          case 41: 
            { /*O lógico (OR)*/
    return symbol(sym.OR, yytext());
            }
          case 126: break;
          case 42: 
            { /*Asignación con XOR binario */
    return symbol(sym.ASIGNACION_XOR, yytext());
            }
          case 127: break;
          case 43: 
            { return symbol(sym.LLAMADA_A_FUNCION, yytext());
            }
          case 128: break;
          case 44: 
            { /*Multiplicación y asignación */
    return symbol(sym.MULTIPLIACION_Y_ASIGNACION, yytext());
            }
          case 129: break;
          case 45: 
            { /* STRINGS */
    return symbol(sym.STRINGS, yytext());
            }
          case 130: break;
          case 46: 
            { return symbol(sym.CHARS, yytext());
            }
          case 131: break;
          case 47: 
            { return symbol(sym.INT, yytext());
            }
          case 132: break;
          case 48: 
            { /*Especifica un bucle for */
    return symbol(sym.FOR, yytext());
            }
          case 133: break;
          case 49: 
            { /*Comparación a tres sentidos */
    return symbol(sym.COMPARACION_TRES_SENTIDOS, yytext());
            }
          case 134: break;
          case 50: 
            { /*Asignación con desplazamiento a la izquierda */
    return symbol(sym.ASIGNACION_DESPLAZAMIENTO_IZQUIERDA, yytext());
            }
          case 135: break;
          case 51: 
            { /*Asignación con desplazamiento a la derecha */
    return symbol(sym.ASIGNACION_DESPLAZAMIENTO_DERECHA, yytext());
            }
          case 136: break;
          case 52: 
            { return symbol(sym.FLOATS, yytext());
            }
          case 137: break;
          case 53: 
            { /*Declara una variable de tipo entero largo*/
    return symbol(sym.LONG, yytext());
            }
          case 138: break;
          case 54: 
            { /*Salta a una etiqueta especifica */
    return symbol(sym.GOTO, yytext());
            }
          case 139: break;
          case 55: 
            { return symbol(sym.BOOLS, yytext());
            }
          case 140: break;
          case 56: 
            { /*Especifica la parte else de una instruccion if */
    return symbol(sym.ELSE, yytext());
            }
          case 141: break;
          case 57: 
            { /*Declara un conjunto de constantes enteras numeradas */
    return symbol(sym.ENUM, yytext());
            }
          case 142: break;
          case 58: 
            { /* Especifica un caso en una sentencia switch */
    return symbol(sym.CASE, yytext());
            }
          case 143: break;
          case 59: 
            { /* Declara una variable de tipo caracter */
    return symbol(sym.CHAR, yytext());
            }
          case 144: break;
          case 60: 
            { return symbol(sym.MAIN, yytext());
            }
          case 145: break;
          case 61: 
            { /*Funcion sin valor*/
    return symbol(sym.VOID, yytext());
            }
          case 146: break;
          case 62: 
            { return symbol(sym.LIB, yytext());
            }
          case 147: break;
          case 63: 
            { /*Declara una union*/
    return symbol(sym.UNION, yytext());
            }
          case 148: break;
          case 64: 
            { /* Termina la ejecucion del bucle o la sentencia switch actual */
    return symbol(sym.BREAK, yytext());
            }
          case 149: break;
          case 65: 
            { /* Declara una variable que no puede ser modificada */
    return symbol(sym.CONST, yytext());
            }
          case 150: break;
          case 66: 
            { /*Declara una variable de tipo entero corto*/
    return symbol(sym.SHORT, yytext());
            }
          case 151: break;
          case 67: 
            { /*Declara una variable de tipo coma flotante */
    return symbol(sym.FLOAT, yytext());
            }
          case 152: break;
          case 68: 
            { /*Especifica un bucle while*/
    return symbol(sym.WHILE, yytext());
            }
          case 153: break;
          case 69: 
            { return symbol(sym.RETURN, yytext());
            }
          case 154: break;
          case 70: 
            { /*Declara una variable global que esta definida en otro archivo */
    return symbol(sym.EXTERN, yytext());
            }
          case 155: break;
          case 71: 
            { /*Declara una variable local que se mantiene en la memoria despues de que la funcion termine*/
    return symbol(sym.STATIC, yytext());
            }
          case 156: break;
          case 72: 
            { /*Declara una estructura*/
    return symbol(sym.STRUCT, yytext());
            }
          case 157: break;
          case 73: 
            { /*Declara una variable de tipo entero con signo*/
    return symbol(sym.SIGNED, yytext());
            }
          case 158: break;
          case 74: 
            { /*Devuelve el tamano de un tipo de dato*/
    return symbol(sym.SIZEOF, yytext());
            }
          case 159: break;
          case 75: 
            { /*Especifica una sentencia switch*/
    return symbol(sym.SWITCH, yytext());
            }
          case 160: break;
          case 76: 
            { /*Declara una variable de tipo doble precision */
    return symbol(sym.DOUBLE, yytext());
            }
          case 161: break;
          case 77: 
            { return symbol(sym.PRINTF, yytext());
            }
          case 162: break;
          case 78: 
            { /*Declara un nuevo tipo de dato*/
    return symbol(sym.TYPEDEF, yytext());
            }
          case 163: break;
          case 79: 
            { /*Especifica un caso por defecto en una sentencia switch */
    return symbol(sym.DEFAULT, yytext());
            }
          case 164: break;
          case 80: 
            { /* Declara una variable local que se almacena en el stack */
    return symbol(sym.AUTO, yytext());
            }
          case 165: break;
          case 81: 
            { /*Declara una variable de tipo entero sin signo*/
    return symbol(sym.UNSIGNED, yytext());
            }
          case 166: break;
          case 82: 
            { /*Declara una variable que se almacena en el registro*/
    return symbol(sym.REGISTER, yytext());
            }
          case 167: break;
          case 83: 
            { /* Salta a la siguiente iteracion del bucle actual */
    return symbol(sym.CONTINUE, yytext());
            }
          case 168: break;
          case 84: 
            { /*Declara una variable que puede ser modificada por hardware*/
    return symbol(sym.VOLATILE, yytext());
            }
          case 169: break;
          case 85: 
            { return symbol(sym.INCLUDE, yytext());
            }
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
