package sintatico;

import java_cup.runtime.*;
import java_cup.sym;

parser code {: 
    public void syntax_error(Symbol s) { 
        String errorMessage = "\u001B[33mError de sintaxis en línea " + s.left + ", columna " + s.right + ", símbolo \"" + s.value + "\"\u001B[0m";
        report_error(errorMessage, null);        
     } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        report_fatal_error("\u001B[33mValue: "+s.value+"\u001B[0m", null); 
    }
:};

/* SIMBOLOS TERMINALES */
terminal AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, INCLUDE, CLASS;
terminal DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER; 
terminal RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION;
terminal UNSIGNED, VOID, VOLATILE, WHILE, LIB, BOOLS, FLOATS, INTS, CHARS, STRINGS;
terminal MAIN, BRACKET_LEFT, BRACKET_RIGHT, PRINTF, PARENTHESES_LEFT, PARENTHESES_RIGHT;

terminal RESTA, DIVISION, SUMA, MODULO, MENOR_QUE, MAYOR_QUE, NEGACION_LOGICA, AND_BINARIO;
terminal OR_BINARIO, XOR_BINARIO, MULTIPLICACION, COMPLEMENTO_A_UNO, INCREMENTO, SUMA_ASIGNACION, IGUAL_QUE, RESTA_ASIGNACION;
terminal DECREMENTO, DIVISION_ASIGNACION,MODULO_Y_ASIGNACION, MENOR_O_IGUAL_QUE,DESPLAZAMIENTO_IZQUIERDA, MAYOR_O_IGUAL_QUE,DESPLAZAMIENTO_DERECHA; 
terminal DIFERENTE_QUE, ASIGNACION_AND, AND,OR,ASIGNACION_XOR, LLAMADA_A_FUNCION, MULTIPLIACION_Y_ASIGNACION, COMPARACION_TRES_SENTIDOS, ASIGNACION_DESPLAZAMIENTO_IZQUIERDA;
terminal ASIGNACION_DESPLAZAMIENTO_DERECHA;
terminal VAR_NAME;

terminal IGUAL, ENTEROS, PUNTO_COMA;
/* SIMBOLOS NO TERMINALES */
non terminal declarations, dec_lib, dec_main, data_main, PRINTF_LIST, PRINTFS, RETURNS, IFS_LIST, IFS, FORS_LIST, FORS, WHILES_LIST, WHILES;
non terminal DO_WHILE, DO_WHILE_LIST, VAR_LIST, VARS, TIPO_DATO, DATO;

/* REGLAS GRAMATICALES */
start with declarations;

declarations::= dec_lib dec_main; /* LIBRERIAS - MAIN */

dec_lib::= INCLUDE LIB; /* LOGICA PARA LIBRERIAS */

dec_main::= INT MAIN LLAMADA_A_FUNCION BRACKET_LEFT data_main RETURNS BRACKET_RIGHT; /* LOGICA DECLARACION MAIN */

data_main::= PRINTF_LIST | IFS_LIST | FORS_LIST | WHILES_LIST | DO_WHILE_LIST | VAR_LIST; /* INFORMACION DEL MAIN */

/* DECLARACION DE VARIABLES */
VAR_LIST::= VAR_LIST VARS | VARS;

VARS::= TIPO_DATO VAR_NAME IGUAL DATO PUNTO_COMA | TIPO_DATO VAR_NAME PUNTO_COMA;

TIPO_DATO::= CHAR | INT | FLOAT | SHORT | DOUBLE | LONG | LONG DOUBLE;

DATO::= STRINGS | CHARS | INTS | FLOATS; /* PARA AGREGAR SHORT, DOUBLE, LONG Y LONG DOUBLE SE DEBEN CREAR LAS ER */

DO_WHILE_LIST::= DO_WHILE_LIST DO_WHILE | DO_WHILE;

DO_WHILE::= DO BRACKET_LEFT BRACKET_RIGHT WHILE LLAMADA_A_FUNCION;

WHILES_LIST::= WHILES_LIST WHILES | WHILES;

WHILES::= WHILE LLAMADA_A_FUNCION BRACKET_LEFT BRACKET_RIGHT;

IFS_LIST::= IFS_LIST IFS | IFS;

IFS::= IF LLAMADA_A_FUNCION BRACKET_LEFT BRACKET_RIGHT;

FORS_LIST::= FORS_LIST FORS | FORS;

FORS::= FOR PARENTHESES_LEFT PUNTO_COMA PUNTO_COMA PARENTHESES_RIGHT BRACKET_LEFT BRACKET_RIGHT; 

PRINTF_LIST::= PRINTF_LIST PRINTFS | PRINTFS; /* LECTURA DE PRINTS */

PRINTFS::= PRINTF PARENTHESES_LEFT STRINGS PARENTHESES_RIGHT PUNTO_COMA;

RETURNS::= RETURN INTS PUNTO_COMA; /* LECTURA DE RETURNS */